https://www.angelique-renaud.com/cryptage.php
https://fr.wikipedia.org/wiki/Portail:Cryptologie
https://qvault.io/
https://www.coursera.org/learn/crypto
https://justcryptography.com/asymmetric-cryptography/
https://en.wikipedia.org/wiki/Substitution_cipher
https://www.educba.com/diffie-hellman-key-exchange-algorithm/
https://www.askdifference.com/encrypt-vs-encipher/
See SRM++.

https://en.wikipedia.org/wiki/RSA_(cryptosystem)
indicatrice d'Euler

AES-CBC

https://cryptohack.org/

----------------
Asymmetric encryption - Uses different keys to encrypt and decrypt.

Cryptanalysis - Attacking cryptography by finding a weakness in the underlying maths

Passphrase - Separate to the key, a passphrase is similar to a password and used to protect a key.

Cryptography is used to

* protect confidentiality (ssh tunnel)
* ensure integrity (checksum)
* ensure authenticity (certificate, signatures)

Any sensitive data stored must be encrypted.

https://www.pcisecuritystandards.org/documents/PCI_DSS_for_Large_Organizations_v1.pdf

* password are hashed, not encrypted

Python for crypto: integers are unlimited in size

* Symmetric encryption: tend to be faster, use smaller keys 128/256 AES
* Asymmetric encryption uses a pair of keys
  * Elliptic Curve Cryptography
  * RSA and Elliptic Curve cryptography are based around different mathematically difficult (intractable) problems, which give them their strength

> RSA typically uses 2048 to 4096 bits keys
>
> RSA is based on the mathematically difficult problem of working out the factors of a large number.
>
> CTF RSA https://github.com/RsaCtfTool/RsaCtfTool / https://github.com/ius/rsatool ?
>
> https://muirlandoracle.co.uk/2020/01/29/rsa-encryption/

* exchanging keys
  * use public-private key to send the key
  * then use symmetric
  * In reality, you need to check authenticity
  * https://robertheaton.com/2014/03/27/how-does-https-actually-work/

* Signature
* Certificates
  * Root CA trusted by device -> chain of trust
  * Let’s Encrypt

SSH that use keys instead of login/pass. ssh-keygen, ssh-copy-id, or manually copying the key into authorized_keys with cat.

DHK

An excellent video if you want a visual explanation is available here. https://www.youtube.com/watch?v=NmM9HA2MQGI

DH Key Exchange is often used alongside RSA public key cryptography, to prove the identity of the person you’re talking to with digital signing. This prevents someone from attacking the connection with a man-in-the-middle attack by pretending to be Bob.

PGP?
PGP stands for Pretty Good Privacy. It’s a software that implements encryption for encrypting files, performing digital signing and more.

GnuPG or GPG is an Open Source implementation of PGP from the GNU project.

AES is complicated to explain, and doesn’t seem to come up as often. If you’d like to learn how it works, here’s an excellent video from Computerphile https://www.youtube.com/watch?v=O4xNJsjtN6E

The NSA recommends using RSA-3072 or better for asymmetric encryption and AES-256 or better for symmetric encryption.

https://doi.org/10.6028/NIST.IR.8105