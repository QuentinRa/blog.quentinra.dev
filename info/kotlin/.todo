Arrays#joinToString

internal

TODO("Not yet implemented")

public static interface OnClickListener {
    void onClick(View view);
}

rollButton.setOnClickListener {
    "it" is a View
}

when (variable) {
    value -> job
    value -> {
        job
    }
    else -> job
}

val value = when(variable) {
    value -> new_value
}

is Type (=> Java instead of)
value in 1..6/???

https://kotlinlang.org/docs/home.html
https://play.kotlinlang.org/byExample/02_control_flow/01_When
https://kotlinlang.org/docs/visibility-modifiers.html#class-members

repeat(5) { /* job */ }
basically
i=0
while(i<5) {
    i++; // i unused
    /* job */
}

"$value"

parent/superclass/baseclass
child/subclass
Root or top-level class

abstract class AClass(){
    abstract val xxx: String

    abstract fun aName(): XXX
}

class AClass : AnotherClass {]
class AClass : AnotherClass(...) {
    override val xxx = "value"

    override fun aName(): XXX {}
}
super.xxx()

open class AClass {}

with (variable) {
    // access all properties of variables without variable.
}

-------------
lateinit
-------------

string.toDouble()
string.toDoubleOrNull()

List<T> listOf(vals) / MutableList<T> mutableListOf<Type>()
println("List: $list")
list.size
list[0] / .get(int) .first() .last() .contains() .reversed() .sorted() .add(T) .addAll(C<T>) .remove(T) .removeAt(int) .isEmpty()
.clear()

for (e in c){}
'b'..'g'
5 downTo 1
3..6 step 2

override fun toString(): String {
    // ...
}

vararg param
_ for unused parameter

!!. assert non null
?. if non null

xxx.yyy {
    return@unit_function return_type_if_any
}

xxx as YYY
xxx as? YYY

- "data class XXX": classes only used to store/manipulate data
- data classes must have at least one property defined.
- create a "date source" that loads data


init {
}

object Layout {
   val XXX = 1
}

listOf arrayOf
toSet() setOf() mutableSetOf()
set1 == set2 : true if equals

mutableMapOf<TK, TV>(
    key to value,
    ...
)
put(key, value)
m[key] = value

c.forEach { /* ... using it */ }
c.map { /* generate a new collection applying a transformation on each it.key it.value */ }
c.filter { /* if true allow, use it */ }
c.sortedWith {}
c.shuffled()
c.take(take_only_n_elements)
c.sort() but already

something.variable.also {
    it.MethodOnVariable()
    it.MethodOnVariable()
}
something.variable.apply {
    MethodOnVariable()
    MethodOnVariable()
}

.joinToString(", ")

(ParamType) -> ReturnType
=> you could give { v: Type -> expression_evaluated_to_return_type }

xxx.yyy {} (lambda expression)

str.startsWith("b", ignoreCase = true)

-----------------
companion object {
    const val SOME_PARAM = "param"
}

CLASS_NAME.SOME_PARAM

companion object is basically associating a nameless "object" to another class,
while this object is kinda a singleton, or sis static.

https://kotlin-quick-reference.com/052-R-control-structures.html