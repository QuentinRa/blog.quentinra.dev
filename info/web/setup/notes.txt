## Captcha

In some cases, you should use a captcha ("I'm not a robot").
Someone may write a script trying
to bruteforce your login form. You can add a captcha
and check on your server that the captcha got submitted
before processing the login form.

The most-well know solution is ReCaptcha (v2 / v3)
of google. In v3, you won't have to process a captcha
but google will watch what you are doing (mouse, ...)
and may request you to submit a captcha if your
(human) score is too low. Check their
tutorial [here](https://developers.google.com/recaptcha/intro)

* (v2) put a html tag looking like that `` <div class="g-recaptcha" data-sitekey=""></div>``
* (v2) in your PHP

```php
$post_data = array('secret' => 'your-secret-key', 'response' => 'data-site-key');
// send post request
// ...
// to https://www.google.com/recaptcha/api/siteverify
// and check the result
```

You may consider [hcaptcha](https://www.hcaptcha.com/) as
an alternative to ReCaptcha.

Adding a captcha should not be an easy choice. It may
not be a good idea.

* You can start first by limiting the number the number of request per ip and hour/...
* You can add a captcha if an user failed to login once
* or you can use something like ReCaptchaV3

What you need to remember is that, if most of the times
you have humans filling the captcha, then you should
really consider an alternative. On top of that, bots
can also bypass a captcha (at least it seems so but I
didn't try).

<hr class="sl">

## SECURITY

Did you notice? I used UPPERCASE letters because it's important.
In HTML/CSS/JS, you can't do much since the user can
see and modify your code (console > sources) but well in
PHP, you will have to handle SQL injections (and many more).

Aside from that, you will have advices in the CyberSecurity
course, "web" section. You may look at the next part too.

<hr class="sr">

## Websites' improvements summary

I'm stacking here, everything that I learned to improve my websites. You should inspect first your website using online checkers

* you should known about <https://validator.w3.org/>
* but, you should look at <https://webhint.io/> too

**Accessibility**

* [Apple touch icon](accessibility/apple-touch.md)
* [Sitemap](accessibility/sitemap.md)

**SEO (Search Engine Optimization)**

* [Titles](seo/titles.md)
* [Descriptions](seo/descriptions.md)
* [OG/twitter meta](seo/og-twitter.md)
* [robots.txt](seo/robots.md)
* [human.txt](seo/human.txt.md)
* [Structured Data](seo/structured.md)
* [Scanners and SEO's tools](seo/tools.md)

**Security**

* [Hide Apache server version](security/apache.md)
* [add rel attribute to external links](security/links.md)
* [Website headers](security/headers.md)
* [Subresource Integrity](security/sri.md)

**Others**

* you may use images .webp images instead of PNG/JPG
* you may use [CDN](seo/cdn.md)
* you may use async/defer to delay the loading of your scripts

https://testssl.sh/

.htaccess
Sur un site web, si vous tapez l’URL d’un dossier alors vous voyez tout son contenu.

(anciennement) on mets un index.html vide pour qu’il soit ouvert (donc on ne verra pas le contenu)

(mieux) on utilise un .htaccess

Introduction
Un .htaccess est un fichier .htaccess à la racine de votre site (vous pouvez en mettre dans des sous-répertoires, mais tous les .htaccess depuis la racine jusqu’à votre répertoire seront pris en compte dans l’application des règles).

Attention, le serveur doit être configuré (voir cours associé) pour que les .htaccess aient un effet.

Vous pouvez

y définir un comportement PHP

définir des règles de redirection

réécrire des URL

On considère / comme la racine du site. On parle du URI pour dire le chemin du site depuis /.

Redirection
Il suffit de mettre Redirect <code> <uri> <to> donc qui redirige les accès à l’uri par l’adresse en <to> avec le code <code>.

Redirect 301 /api https://duckduckgo.com/
Si mon site est https://duckduckgo.com/ alors https://duckduckgo.com/api/ va ouvrir rediriger vers la page https://duckduckgo.com/. Le code 301 indique que c’est permanent sinon on mets 302.

Pour empêcher l’accès à des ressources, on peut utiliser

RedirectMatch 404 regex
Changer le fichier par défaut

DirectoryIndex index.php index.htm index.html autre.html
Rediriger toutes les 404 vers un fichier

ErrorDocument 404 /error404.php
Réécriture des URL
Votre serveur doit avoir autorisé la réécriture des URL sinon votre htaccess ne fera rien.

# active la réécriture depuis la racine
RewriteEngine On
RewriteBase "/"
# la règle ne s'applique pas aux dossiers
# (donc nom valide de dossier par exemple /api et api existe)
RewriteCond %{REQUEST_FILENAME} !-d
# la règle ne s'applique pas aux fichiers
# (donc nom valide de fichier par exemple test.html et test.html existe)
RewriteCond %{REQUEST_FILENAME} !-f
# sinon alors on redirige (non visible par l'utilisateur) vers la page
RewriteRule ^(.+)$ api/index.php [L]
