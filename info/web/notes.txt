* you should known about <https://validator.w3.org/>
* but, you should look at <https://webhint.io/> too

**Accessibility**

* [Apple touch icon](accessibility/apple-touch.md)
* [Sitemap](accessibility/sitemap.md)

**SEO (Search Engine Optimization)**

* [Titles](seo/titles.md)
* [Descriptions](seo/descriptions.md)
* [OG/twitter meta](seo/og-twitter.md)
* [robots.txt](seo/robots.md)
* [human.txt](seo/human.txt.md)
* [Structured Data](seo/structured.md)
* [Scanners and SEO's tools](seo/tools.md)

**Security**

* [Hide Apache server version](security/apache.md)
* [add rel attribute to external links](security/links.md)
* [Website headers](security/headers.md)
* [Subresource Integrity](security/sri.md)

**Others**

* you may use images .webp images instead of PNG/JPG
* you may use [CDN](seo/cdn.md)
* you may use async/defer to delay the loading of your scripts

https://testssl.sh/

.htaccess
Sur un site web, si vous tapez l’URL d’un dossier alors vous voyez tout son contenu.

(anciennement) on mets un index.html vide pour qu’il soit ouvert (donc on ne verra pas le contenu)

(mieux) on utilise un .htaccess

Introduction
Un .htaccess est un fichier .htaccess à la racine de votre site (vous pouvez en mettre dans des sous-répertoires, mais tous les .htaccess depuis la racine jusqu’à votre répertoire seront pris en compte dans l’application des règles).

Attention, le serveur doit être configuré (voir cours associé) pour que les .htaccess aient un effet.

Vous pouvez

y définir un comportement PHP

définir des règles de redirection

réécrire des URL

On considère / comme la racine du site. On parle du URI pour dire le chemin du site depuis /.

Redirection
Il suffit de mettre Redirect <code> <uri> <to> donc qui redirige les accès à l’uri par l’adresse en <to> avec le code <code>.

Redirect 301 /api https://duckduckgo.com/
Si mon site est https://duckduckgo.com/ alors https://duckduckgo.com/api/ va ouvrir rediriger vers la page https://duckduckgo.com/. Le code 301 indique que c’est permanent sinon on mets 302.

Pour empêcher l’accès à des ressources, on peut utiliser

RedirectMatch 404 regex
Changer le fichier par défaut

DirectoryIndex index.php index.htm index.html autre.html
Rediriger toutes les 404 vers un fichier

ErrorDocument 404 /error404.php
Réécriture des URL
Votre serveur doit avoir autorisé la réécriture des URL sinon votre htaccess ne fera rien.

# active la réécriture depuis la racine
RewriteEngine On
RewriteBase "/"
# la règle ne s'applique pas aux dossiers
# (donc nom valide de dossier par exemple /api et api existe)
RewriteCond %{REQUEST_FILENAME} !-d
# la règle ne s'applique pas aux fichiers
# (donc nom valide de fichier par exemple test.html et test.html existe)
RewriteCond %{REQUEST_FILENAME} !-f
# sinon alors on redirige (non visible par l'utilisateur) vers la page
RewriteRule ^(.+)$ api/index.php [L]

Alternativement, pour simplifier le développement car beaucoup de sites se ressemblent,
il existe des framework. Des frameworks CSS connus sont : Bootstrap, MDBoostrap, w3css et
des frameworks PHP connus sont : Zend, Symphony, Laravel et CodeIgniter (pas trop vrai mais :p).

robots.txt
Un fichier à la racine destiné aux robots.

User-agent: * # * = tous
Disallow: / # si vous mettez rien alors il ont accès à tout
# vous pouvez définir d'autres Disallow

# vous pouvez bloquer un robot particulier
User-agent: Bingbot # ou Googlebot, Yandex, AdsBot-Google, Twitterbot ...
Disallow: /

# optionnel, un lien vers un xml : https://www.sitemaps.org/schemas/sitemap/0.9/
# un exemple : https://www.blackdesertonline.com/sitemap.xml <3
Sitemap: url/fichier.xml

http://robots-txt.com/
https://httpd.apache.org/docs/current/howto/htaccess.html
https://www.godaddy.com/garage/htaccess-tutorial-and-cheat-sheet/
https://www.contentkingapp.com/academy/redirects/
https://searchfacts.com/robots-txt-allow-disallow-all/
https://www.semrush.com/blog/beginners-guide-robots-txt/