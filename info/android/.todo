* Pick android version
* Switch Project View
* Device emulator
* Android Tests + Advanced testing
=> https://developer.android.com/codelabs/android-basics-kotlin-write-instrumentation-tests
=> https://developer.android.com/codelabs/android-basics-kotlin-affirmations-test-lists-and-adapters
* You got options to do things faster using right-click.
* Android Application Lifecycle

https://developer.android.com/docs
https://developer.android.com/teach
https://developer.android.com/guide
https://developer.android.com/develop/ui

https://developer.android.com/codelabs/basic-android-kotlin-training-polished-user-experience
=> Talkback
=> Tint/Dark mode

FrameLayout: a single child view.
> * Replace `ConstraintLayout` in the .fxml with `FrameLayout`
> * Or click on `ConstraintLayout` in the layer tree > Convert view > `FrameLayout`

> **Remainder**: try to rotate the screen, and see if the view is still fine. If not, you may use a ScrollView, disable rotation...

@StringRes
@DrawableRes
@LayoutRes

-----------------
recyclerView.layoutManager = LinearLayoutManager(this)
// Adds a [DividerItemDecoration] between items
recyclerView.addItemDecoration(
    DividerItemDecoration(this, DividerItemDecoration.VERTICAL)
)

@RequiresApi(Build.VERSION_CODES.LOLLIPOP)

<resources>
    <string-array name="words">
    </string-array>
</resources>

context.resources.getStringArray(R.array.words).toList()

title = getString(R.string.detail_prefix) + " " + letterId
-----------------

## Material Design

Material design is a library of pre-made components. Google recommends to use Material UI components as much as possible. The list [of Material components for Android can be found here](https://material.io/components?platform=android).

* Text field: `TextInputLayout` (see [text field](https://material.io/components/text-fields/android#using-text-fields))
* Switch: `SwitchMaterial` (create a switch, change the type in the .xml)

<details class="details-e">
<summary>Icons</summary>

* Open the resources manager
* "+" > new vector asset
* click on the android icon for "clip art"
* select an icon

For Android 20, or older versions, you need to add `vectorDrawables.useSupportLibrary = true` in build.gradle > Android > defaultConfig.

</details>

********
Icon
********

different manufacturers may show app icons in a different shape than
the circular icon shape :  square shape, rounded square, or squircle (between a square and circle)...

https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp

Adaptive icons since v26
=> background
=> foreground
=> + new image asset
    => new assets should be moved in the same folder v26

https://developer.android.com/codelabs/basic-android-kotlin-training-display-list-cards
3 => easy way to import icon

https://developer.android.com/reference/com/google/android/material/card/MaterialCardView

----------------
private lateinit var binding: ActivityMainBinding
binding = DataBindingUtil.setContentView(this, R.layout.activity_main)
----------------
val shareIntent = ShareCompat.IntentBuilder.from(this)
                .setText("...")
                .setType("text/plain")
                .intent
try {
    startActivity(shareIntent)
} catch (ex: ActivityNotFoundException) {
    Toast.makeText(this, "Sharing not available",
    Toast.LENGTH_LONG).show()
}
----------------

Resource type: Menu
=> Menu Item
    id
    title
    icon
    showAsAction
    => always: not in overflow

ContextCompat.getDrawable(this, R.drawable.ic_grid_layout)

override fun onCreateOptionsMenu(menu: Menu?): Boolean {
   menuInflater.inflate(R.menu.your_menu_layout, menu)

   // find menu item
   menu?.findItem(R.id.some_menu_item)

   return true
}

override fun onOptionsItemSelected(item: MenuItem): Boolean {
   return when (item.itemId) {
       R.id.some_menu_item -> {
            // ...
            return true
       }
       //  Otherwise, do nothing and use the core event handling
       else -> super.onOptionsItemSelected(item)
   }
}
----------------
----------------
Initialized
-OnCreate> Created -onDestroy> Destroyed
           <OnStop-OnStart/OnRestart*> Started (=activity visible) <OnPause-OnResume> Resumed (=activity focused)
The schema in the course is quite good.

If it's a restart, then both restart then start are called.
OnRestart is called is the activity has already been started once.

OnPause: when share opened, screen partially visible, paused
Whatever code runs in onPause() blocks other things from displaying, so keep the code in onPause() lightweight.
For example, if a phone call comes in, the code in onPause() may delay the incoming-call notification.

The system destroy app when there are big changes, and it would be better to "create" the app again
(ex: language changed, rotation of the screen).

Started to Created => onSaveInstanceState
Created to Started => onRestoreInstanceState

You can use bundle, an in-memory small dictionary (string->?), to store data.
We mostly used OnCreate to restore, because onRestoreInstanceState is called after start.