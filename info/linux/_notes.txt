<hr class="sl">

## Paths

On Windows, you are able to use the file explorer to move trough folders and find your files. On Linux, you may not have such luxury, and will have to use the console.

On Linux, everything is a file. It means that hard-drives, terminals, processes, etc. are files. You need a


A path (`chemin`) is a way to find a file or a folder. On Windows, you should have seen things like `C:\Program Files (x86)\...`. A path is made of folders, separated by a **separator** (`\` on Windows, `/` on Linux), while the last value of the path may be a file.

* **Windows**: `C:\Program Files (x86)\ocaml`
* **Linux**: `/bin/ocaml`

You may have noticed that the path is starting by a `/` on Linux. This is called the `root`, meaning that every file/folder is inside the `root`. You got the same on Windows with `C:` (if you only have one hard drive, called `C:`).

* **Absolue Path**: you are giving a path starting with the root.
  * `/bin/ocaml`
  * `C:\Program Files (x86)\ocaml`
* **Relative Path**: you are giving a path relative to your current location.
  * (ex: in `/bin/`) `./ocaml`
  * (ex: in `C:\Program Files (x86)`) `ocaml`

What's this `.` in `./ocaml`? Well, on Linux, every path is absolute. Fortunately, you got some shortcut (that you can use on Windows too)

* `.` is the absolute path to the current directory (ex: in `/bin/`, `./ocaml` is translated as `/bin/ocaml`)
* `..` is the parent directory (ex: `/bin/../` mean that you go to inside bin, then go back the the parent folder, which is the root folder giving us `/`).
  * Note: the parent of the root is the root itself

> **Pro tip**: `//bin/////ocaml` is a valid path, because slashes are merged if there is nothing between two slashes. The resulting path is `/bin/ocaml`.