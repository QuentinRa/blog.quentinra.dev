================================
1. Demande et offre de monnaie
================================

.. image:: https://img.shields.io/badge/correction-vérifiée-green.svg?style=flat&amp;colorA=E1523D&amp;colorB=007D8A
   :alt: correction vérifiée

Soit une économie dont la fonction de demande de monnaie s’écrit

	*	Md = PY (0,35 − i) lorsque i > 3%
	*	Md = 0,25PY lorsque i > 10%

On suppose que le revenu national PY=60.000 euros et que l’offre de monnaie est de
Ms=16.000 euros.

Question 1
------------------------

Quelles sont les trois fonctions de la monnaie ? Lesquelles de ces fonctions peuvent
remplir ou ne pas remplir les objets qui suivent ?

Fonctions de la monnaie (cours) : intermédiaire des échanges, mesure de la valeur et réserve de pouvoir d’achat.

	(a) Une carte de crédit : intermédiaire des échanges
	(b) Une peinture de Rembrandt : réserve de pouvoir d’achat
	(c) Un ticket de métro : aucun

Question 2
------------------------

Représentez graphiquement la fonction de demande de monnaie et l’offre de monnaie.

| Droite Bleu : Md = PY (0,35 − i) lorsque i > 3%
| Droite Orange : Md = 0,25PY lorsque i > 10% (dépends pas de i donc stable à 15000)
| Droite Rouge : Ms = 16000

.. plot::

		import math
		import numpy as np
		import matplotlib.pyplot as plt

		x = np.arange(0.03, 0.0999, 0.001)
		y = 60000*(0.35-x)

		fig = plt.figure()
		ax = fig.add_subplot(1, 1, 1)

		ax.plot(x, y, color='tab:blue')
		x = np.arange(0.0999, 1, 0.001)
		y = 15000+0*x
		ax.plot(x, y, color='tab:orange')

		x = np.arange(0.03, 1, 0.001)
		y = 16000+0*x
		ax.plot(x, y, color='tab:red')

		# Eliminate upper and right axes
		ax.spines['right'].set_color('none')
		ax.spines['top'].set_color('none')

		# Show ticks in the left and lower axes only
		ax.xaxis.set_ticks_position('bottom')

		plt.show()

Question 3
------------------------

Quel est le taux d’intérêt d’équilibre ?

	* Md = PY (0,35 − i) lorsque i > 3%
	* Ms = 16000
	* PY = 60000
	* Formule
		* Md = PY (0.35 − i) = Ms = PY * L(i) = 16000
		* 60000 (0.35 − i) = 16000
		* 0.35 − i = 0.26666666667
		* − i = 0.26666666667 - 0.35
		* − i = -0.0833333
		* i = 0.083
		* Donc i = 8.33% (< 10 donc on ne teste pas l'autre formule)
	* Graphiquement
		* on voit que les deux courbes se croisent vers environ i = 0.7~0.9 (pas préçis du tout)

Question 4
------------------------

Supposons à présent que le revenu national augmente et passe à 70.000 euros.
Exprimez et représentez (sur le même graphique) la nouvelle fonction de demande de
monnaie. Qu’en est-il du nouveau taux d’intérêt d’équilibre ? Expliquez.

| Droite Verte : Bleu mais avec nouveau Y : 70000
| Droite Rose : Orange mais avec nouveau Y : 70000
| Droite Rouge : Ms = 16000

.. plot::

		import math
		import numpy as np
		import matplotlib.pyplot as plt

		x = np.arange(0.03, 0.0999, 0.001)
		y = 60000*(0.35-x)

		fig = plt.figure()
		ax = fig.add_subplot(1, 1, 1)

		x = np.arange(0.03, 0.0999, 0.001)
		y = 70000*(0.35-x)
		ax.plot(x, y, color='tab:green')
		x = np.arange(0.0999, 1, 0.001)
		y = 17500+0*x
		ax.plot(x, y, color='tab:pink')
		x = np.arange(0.03, 1, 0.001)
		y = 16000+0*x
		ax.plot(x, y, color='tab:red')

		# Eliminate upper and right axes
		ax.spines['right'].set_color('none')
		ax.spines['top'].set_color('none')

		# Show ticks in the left and lower axes only
		ax.xaxis.set_ticks_position('bottom')

		plt.show()

Calcul de i

	* Md = PY (0,35 − i) lorsque i > 3%
	* Ms = 16000
	* PY = 70000
	* Formule
		* Md = PY (0.35 − i) = Ms = PY * L(i) = 16000
		* 70000 (0.35 − i) = 16000
		* 0.35 − i = 0.22857142857
		* − i = 0.22857142857 - 0.35
		* − i = -0.12142857143
		* i = 0.12142857143
	* Donc i = 12.14% (> 10 donc on teste l'autre formule)
		* Md = 0,25PY = Ms = PY * L(i) = 16000
		* 0,25*70000 = 16000
		* (cette formule donne toujours le même i donc on a i ))
		* i = 16000/(0,25*70000)
		* i = 0.91428571429
	* Donc i = 9.14%

Question 5
------------------------

Revenons à la situation initiale (PY =60.000 euros). Supposons à présent que la
Banque centrale décide d’accroître l’offre de monnaie. Celle-ci passe à 20.000 euros.
Représentez graphiquement et analysez les conséquences de l’accroissement de l’offre
de monnaie dans cette économie. Qu’en est-il de la demande de monnaie pour motif
de transaction, de précaution, de spéculation.

| Droite Bleu : Md = PY (0,35 − i) lorsque i > 3%
| Droite Orange : Md = 0,25PY lorsque i > 10% (dépends pas de i donc stable à 15000)
| Droite Rouge : Ms = 20000

.. plot::

		import math
		import numpy as np
		import matplotlib.pyplot as plt

		x = np.arange(0.03, 0.0999, 0.001)
		y = 60000*(0.35-x)

		fig = plt.figure()
		ax = fig.add_subplot(1, 1, 1)

		ax.plot(x, y, color='tab:blue')
		x = np.arange(0.0999, 1, 0.001)
		y = 15000+0*x
		ax.plot(x, y, color='tab:orange')
		x = np.arange(0.03, 1, 0.001)
		y = 20000+0*x
		ax.plot(x, y, color='tab:red')

		# Eliminate upper and right axes
		ax.spines['right'].set_color('none')
		ax.spines['top'].set_color('none')

		# Show ticks in the left and lower axes only
		ax.xaxis.set_ticks_position('bottom')

		plt.show()

Calcul de i

	* Md = PY (0,35 − i) lorsque i > 3%
	* Ms = 20000
	* PY = 60000
	* Formule
		* Md = PY (0.35 − i) = Ms = PY * L(i) = 20000
		* 60000 (0.35 − i) = 20000
		* 0.35 − i = 0.33333333333
		* − i = 0.33333333333 - 0.35
		* − i = -0.01666666667
		* i = 0.01666666667
	* Donc i = 1.66% or i forcément supérieur à 3% donc i = 3%
	* Lorsque taux plus de 10, alors plus de i donc coût de spéculation élevé donc plus de demande de monnaie pour motif de spéculation.

Question 6
------------------------

Supposons à présent que la Banque centrale décide de réduire l’offre de monnaie.
Celle-ci passe à 15.000 euros. Représentez sur le même graphique que précédemment
et analysez les conséquences de la baisse de monnaie dans cette économie.

| Droite Bleu : Md = PY (0,35 − i) lorsque i > 3%
| Droite Orange : Md = 0,25PY lorsque i > 10% (dépends pas de i donc stable à 15000)
| Droite Rouge : Ms = 15000
| Droite Rouge et Orange sont superposés

.. plot::

		import math
		import numpy as np
		import matplotlib.pyplot as plt

		x = np.arange(0.03, 0.0999, 0.001)
		y = 60000*(0.35-x)

		fig = plt.figure()
		ax = fig.add_subplot(1, 1, 1)

		ax.plot(x, y, color='tab:blue')
		x = np.arange(0.0999, 1, 0.001)
		y = 15020+0*x
		ax.plot(x, y, color='tab:orange')
		x = np.arange(0.03, 1, 0.001)
		y = 14980+0*x
		ax.plot(x, y, color='tab:red')

		# Eliminate upper and right axes
		ax.spines['right'].set_color('none')
		ax.spines['top'].set_color('none')

		# Show ticks in the left and lower axes only
		ax.xaxis.set_ticks_position('bottom')

		plt.show()

Calcul de i

	* Md = PY (0,35 − i) lorsque i > 3%
	* Ms = 15000
	* PY = 60000
	* Formule
		* Md = PY (0.35 − i) = Ms = PY * L(i) = 15000
		* 60000 (0.35 − i) = 15000
		* 0.35 − i = 0.25
		* − i = 0.25 - 0.35
		* − i = -0.10
		* i = 0.1
	* Donc i = 10%

**Crédits**
	* Quentin RAMSAMY--AGEORGES (étudiant à l'ENSIIE)