=====================
CLion (C/C++)
=====================

Un IDE tr√®s peu facile √† utiliser, car il utilise CMake pour compiler.
Cela pose un certain nombre de probl√®mes

	* vous devez apprendre CMake (non! pas du tout en fait)
	* vous √™tes limit√©s par CMake en terme de librairies (oui :code:`üò≠`, voir plus bas)
	* les fichiers non associ√©s √† CMake ne seront pas corrig√©s (pas de v√©rification de syntaxe...)

Donc pour plus de d√©tails, vous allez cr√©er un fichier :code:`CMakeLists.txt` √† la racine,
dont le contenu est assez simple et change rarement (si vous voulez ajouter des librairies
par exemple). Si vous voulez utiliser des librairies, alors parfois c'est tr√®s compliqu√©,
donc je mets toutes mes trouvailles ici !

Enfin, il faut bien s'assurer que les fichiers sont compil√©s par CLion, donc

	* tous les .c utilis√©s sont dedans
	* tous les .h utilis√©s sont dedans
	* et : les .h sont li√©s au .c (directement=include ou indirectement avec un .h include dans le .c qui include d'autres .h)

Voici le contenu d'un CMakeLists.txt

.. code:: cmake

		cmake_minimum_required(VERSION 3.16.3) # ou 17
		project(nom_projet C) # le nom du projet, et on indique que c'est du C
		set(CMAKE_C_STANDARD 99) # d√©finit le standard

		# une cible est comme une cible Makefile, voir apr√®s
		# vous pouvez avoir plein de cibles, il faut lister tous les .c et .h
		add_executable(nom_cible main.c main.h ...)

Dans ce menu, vous pouvez retrouver vos cibles (ici prim, le 2) et compilez (1)
ou lancer (+compiler, la fl√®che verte 4).

.. image:: /assets/utils/jetbrains/cl1.png

Le 3 indique le profil utilis√© pour compiler. Un profil permet par exemple d'avoir
des options de compilation de DEBUG (development) et des options de compilation
RELEASE (production) diff√©rentes. Vous n'en n'aurez certainement pas besoin
mais pour cr√©er un profil : Settings > cmake (et vous mettez :code:`-DCMAKE_CXX_FLAGS="-Wall -Wextra"`
par exemple comme options). Vous pouvez le mettre directement dans le CMakeLists.txt

.. code:: cmake

	# options -Wall -Wextra pour tous les profiles
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")

.. toctree::
	 :maxdepth: 1

		Utiliser la librairie pthread <clion/pthread>
		Utiliser des libraires/.h/.a  <clion/lib>
		Changer de compilateur        <clion/comp>
		Remote Working                <clion/remote>

Si vous n'avez pas CMake d'install√©, vous pouvez l'installer via WSL
en suivant ce tutoriel https://www.jetbrains.com/help/clion/how-to-use-wsl-development-environment-in-product.html#wsl-tooclhain.


