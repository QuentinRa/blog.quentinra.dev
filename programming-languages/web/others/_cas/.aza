# README

```php
<?php

// https://cas.ensiie.fr/login?service=https%3A%2F%2Framsamy.iiens.net%2F
// https://ramsamy.iiens.net/
// https://apereo.github.io/cas/6.5.x/index.html
// https://apereo.github.io/phpCAS/
// https://www.apereo.org/projects/cas
// https://oauth.iiens.net/client/
// https://wiki.iiens.net/services_arise/perso_connection
// https://www.tutorialguruji.com/php/cas-server-login/

include_once('../cas/CAS.php');

phpCAS::client(CAS_VERSION_2_0, "cas.ensiie.fr", 443, '');
phpCAS::setNoCasServerValidation();
phpCAS::forceAuthentication();
$userName = phpCAS::getUser();
var_dump($userName);

//var_dump($userName);

//var_dump("ok");

//echo "user is ".(isset($_SERVER['REMOTE_USER']) ? $_SERVER['REMOTE_USER'] : '[missing]');
//
//echo "<pre>";
//var_dump($_GET);
//var_dump($_POST);
////var_dump($_SERVER);
//echo "</pre>";
```

```php
<?php

/* On inclut la bibliothèque Arise pour OAuth. */
/* ======================= ATTENTION ! ======================== */
/* Ce fichier doit être inclut AVANT un appel à session_start() */
require_once("/usr/share/php/ariseid/client/OAuthAriseClient.php");

/*
   On crée l'objet Consumer qui va vous permettre d'interagir avec Arise :
   on lui fournit les trois informations données lors de la création de
   l'application dans le chapitre précédent.
*/
$consumer = OAuthAriseClient::getInstance($consumer_key, $consumer_secret,
    $consumer_private_key);

if (isset($_POST['login'])) {
    /*
       L'utilisateur a cliqué sur le bouton de connexion.
       Nous allons donc l'authentifier.
    */
    $consumer->authenticate();
}

if (isset($_POST['logout'])) {
    /*
       L'utilisateur a cliqué sur le bouton de déconnexion.
       Nous allons donc effacer ses informations d'authentification.
    */
    $consumer->logout();
}

if ($consumer->has_just_authenticated()) {
    /*
       Lorsqu'un utilisateur vient de s'authentifier auprès d'un service,
       les bonnes pratiques recommandent de renouveler son identifiant
       de session pour éviter les attaques par fixation de session.
       C'est ce que fait ici ``session_regenerate_id``. Cependant,
       pour permettre au SLO de fonctionner, vous devez notifier la
       bibliothèque Arise que cet identifiant a changé,
       c'est ce que permet ``$consumer->session_id_changed``.
    */

    session_regenerate_id();
    /*
       Il est plus propre et efficace de faire cet appel regroupé
       avec tous les autres (donc entre un $consumer->api()->begin()
       et un done() mais pour l'exemple c'est plus lisible.
    */
    $consumer->session_id_changed();
}

if ($consumer->is_authenticated()) {
    /*
       Ici l'utilisateur est authentifié, c'est à dire qu'il s'est
       connecté à AriseID et nous a autorisé à accéder à ses
       informations privées.
       Attention les autorisations facultatives n'ont pas forcément
       été données. Il existe deux méthodes pour le savoir :
        * tenter l'appel et vérifier l'erreur renvoyée ou,
        * faire d'abord un appel à ``$consumer->api()->get_authorizations()``
                    qui renverra un tableau avec toutes les
                    autorisations que l'utilisateur a données.
    */

    /*
       Il existe deux moyens de faire des appels à l'API Arise :
        * $resultat = $consumer->api()
            ->mon_appel($argument1, $argument2) :
                    cet appel va envoyer une requête immédiatement à
                    Arise pour exécuter l'appel et le retour de la
                    fonction sera la valeur de retour renvoyée par Arise.
                    Une exception sera générée en cas d'erreur.
        * $results = $consumer->api()->begin()
            ->mon_appel1($argument1, $argument2)
            ->mon_appel2()->done() :
                    cet appel permet d'envoyer simultanément
                    plusieurs requêtes à Arise. Cette méthode
                    doit être préférée car plus efficace.
       Cet ensemble d'appels renvoie un tableau de fonctions permettant d'obtenir les
       résultats. Nous allons voir ci-dessous comment accéder à chaque résultat.
    */
    $results = $consumer->api()->begin()
        ->get_identifiant()
        ->get_prenom()
        ->get_statut_aeiie()
        ->done();

    /*
       Nous accédons au résultat en faisant un appel : ``$result[0]``
       correspond à un résultat et nous l'appelons : ``$result[0]()``.
       Cet appel générera une exception si Arise a renvoyé une erreur
       lors de l'appel. Sinon, la valeur de retour est le résultat
       de l'appel que nous affichons ici.
    */
    try {
        $ident = $results[0]();
        echo "Bonjour ".$ident." !";
    }
    catch(OAuthAPIException $e) {
        echo "Erreur : ".$e->getMessage();
    }

    /*
       Ici nous affichons les moyens de se déconnecter. Avec AriseID il est
       possible de se déconnecter simultanément de toutes les applications
       en même temps. C'est le Single Logout (SLO).
       Une application bien développée devrait permettre à ses utilisateurs
       de le faire.

       L'appel à ``$consumer->get_single_logout_uri($callback)`` renvoie
       l'URL vers laquelle rediriger l'utilsateur lorsqu'il veut se
       déconnecter.
       L'argument de la fonction est l'URL vers laquelle l'utilisateur sera
       redirigé ensuite : votre page principale par exemple.
    */
    ?>
    <form method="post">
        <input type="submit" name="logout" value="D&eacute;connexion"/>
    </form>
    <a href="<?php echo $consumer->get_single_logout_uri(
        OAuthAriseClient::getScriptURL()) ?>">
        D&eacute;connexion de AriseID
    </a>
    <?php

}
else {
    /*
       Ici, nous ne sommes pas authentifiés. Nous affichons donc un bouton
       pour initier la connexion.
    */
    ?>
    <form method='POST'>
        <input type='submit' value='Log In with AriseID'
               name='login' />
    </form>
    <?php
}
?>
```

* https://www.creative-tim.com/templates/free?page=3
* https://www.creative-tim.com/product/coming-sssoon-page
* https://www.creative-tim.com/templates/ui-kit?direction=asc&sort=price
* https://demos.creative-tim.com/bs3/paper-kit/examples/register.html
* https://www.creative-tim.com/product/paper-kit
* https://github.com/creativetimofficial/material-kit#quick-start
* https://technext.github.io/volt/#demo
* https://technext.github.io/miri-ui/
* https://bootstrapmade.com/restaurantly-restaurant-template/
* https://bootstrapmade.com/demo/Gp/
* https://bootstrapmade.com/delicious-free-restaurant-bootstrap-theme/
* https://unicon.github.io/cas/4.0.x/installation/Logout-Single-Signout.html

```html
<div class="animate__animated animate__fadeInUp
 animate__animated animate__fadeInDown"></div>
<span data-purecounter-start="0" data-purecounter-end="35" data-purecounter-duration="0" class="purecounter">35</span>
```

```php
??
??=
[$v1, $v2] = array(0, 1)
function name(int $name) : string {}
function name(?int $name) : ?string {}
public const $v = 5;
private int $v;
foreach ($this->asserts as $i => [$v1, $v2]) {}
/*
 * ,
    "config": {
        "platform": {
            "php": "5.4.45"
        }
    }
 */
```r