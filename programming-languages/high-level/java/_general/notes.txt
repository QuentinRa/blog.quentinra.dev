------- database

Connexion

// -------- Connexion --------
Statement stmt = c.createStatement();
stmt.executeUpdate("sql");
stmt.close();

// ou

//une requêtes préparée permet de créer une requête avec des ? auquel vous pourrez donner
// une valeur plus tard. L'avantage est que les arguments sont échappés donc pas d'injection de code.
// ex: Select * from table1 where `id`=?
PreparedStatement stmt = c.prepareStatement(sql);
//fermer le statement après les/la requête(s) faite(s)
stmt.close();

//pour remplacer des ?, on donne l'index du ? (commence à 1) et la valeur
stmt.setInt(index, valeur)
stmt.setString(index, valeur)
...

// requête qui ne retourne rien
stmt.executeUpdate();

//-------- retourne un résultat --------
ResultSet results = stmt.executeQuery();//preparedStatement
ResultSet results = stmt.executeQuery(sql);//statement
//fermeture
results.close();
Exploiter un set de résultats

Les résultat sont lus à la volée pour éviter de tout récupérer donc encore des exceptions un curseur permet de savoir ou on est en train de lire, il est juste avant le 1er élément au début donc il faut l’avancer de 1, s’il existe un premier élément, pour pouvoir le lire.

// avance le curseur de 1, retourne false si aucun next
boolean results.next();
// recule le curseur de 1, attention, n'est pas toujours disponible
boolean results.previous();
// avance le curseur au premier, retourne false si aucun premier
boolean results.first();
// pour récupérer la valeur lue
// retourne la valeur correspond à cette colonne/attribut
int results.getInt(positionColonne);
String results.getString(positionColonne);
// pour obtenir la position d'une colonne, vous pouvez utiliser
int findColumn(String nomColonne);
Vous pouvez obtenir tous les noms de colonnes avec les méta-data du ResultSet.

Obtenir ID d’insertion sur un Statement stmt

try(ResultSet generatedKeys = stmt.getGeneratedKeys()) {
 if(!generatedKeys.next()) return -1;
 return (int) generatedKeys.getLong(1);
}
Closable

Pour éviter de devoir faire des closes, on peut utiliser le try with ressource.

// try with ressource ferme automatiquement un ressource Closable (appel de .close())
try (Connection c = DriverManager.getConnection(...)) {
 try (Statement s: c.createStatement()) {
        try (ResultSet rs = stmt.executeQuery(...)) {
         while(rs.next()){
                ...
         }
        }
 }
} catch(SQLException e) {
 System.err.println(e);
}

------ new

https://betterprogramming.pub/java-15-features-sealed-and-hidden-classes-pattern-matching-and-text-blocks-38f4efdc8adc
https://www.journaldev.com/9879/java-repl-jshell
https://openjdk.java.net/jeps/397
https://openjdk.java.net/jeps/395

https://www.jpro.one/

https://edencoding.com/resources/css_properties/fx-background-color/

https://quollwriter.wordpress.com/2019/12/15/using-a-javafx-webview-to-display-basic-html-content/
https://github.com/commonmark/commonmark-java
http://tutorials.jenkov.com/javafx/webview.html
https://stackoverflow.com/questions/17555937/hyperlinklistener-in-javafx-webengine

https://imperceptiblethoughts.com/shadow/introduction/

https://github.com/openjfx/samples/tree/master/HelloFX

https://github.com/nipafx/slides

https://stackoverflow.com/questions/289434/how-to-make-a-java-thread-wait-for-another-threads-output

https://nipafx.dev/java-13-guide/
https://github.com/nipafx/demo-java-x
https://www.azul.com/blog/81-new-features-and-apis-in-jdk-13/
https://github.com/nipafx/nipafx.dev
https://github.com/nipafx/slides/blob/master/java-16/_presentation.adoc
https://github.com/nipafx/slides