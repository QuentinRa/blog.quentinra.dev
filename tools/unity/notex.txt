<details class="details-e">
<summary>UI Builder (2020.3+, upcoming)</summary>

**In 2021, you might look at the UI Builder**, to create user interfaces (UI), like in [this video](https://www.youtube.com/watch?v=NQYHIH0BJbs&ab_channel=CocoCode).
</details>

<details class="details-e">
<summary>Canvas</summary>

Create a **canvas** (UI > Canvas), this is a component used to store every UI components. You may switch to 2D, as it will make your life easier.

* load a background
  * create a new ui > image
  * anchor presets: alt + stretch x/y (bottom right corner)
  * then drag and drop an image into the slot
  * you may have to transform your image into a sprite
  * [video here](https://www.youtube.com/watch?v=RsgiYqLID-U&ab_channel=CocoCode)
  * to make a **blur** background (like your game behind the UI) it's complicated
* you create buttons with ui > buttons, then set the text, you may set an image as a background (you may look into [9patch](https://www.construct.net/en/make-games/manuals/construct-3/plugin-reference/9-patch), explained in the video too)
* you create labels with ui > text, then set the text
* you can use layouts (like in Java) but using anchors may be enough for a simple UI ([video here](https://www.youtube.com/watch?v=HwdweCX5aMI&ab_channel=GameDevGuide))
* if you want some resizing (and you are not using anchors) then
  * add a "canvas scaler" to your canvas
  * set scale mode to "scale with the screen size"
  * and give it a size

You can make your hierarchy looks better using this [plugin](https://github.com/febucci/unitypackage-custom-hierarchy) following this [video](https://www.youtube.com/watch?v=Gma7IXPj4wI&ab_channel=CocoCode)

You may create advanced buttons like in this [video](https://www.youtube.com/watch?v=cW-E4WEogzE&ab_channel=CocoCode)
* create a button add a text and an image
* add a horizontal layout component to the button
* set the spacing, ...
* then on the image, you can add a layout element to resize the image
* you can add a "content size fitter" to make the button resize itself (set fit to preferred size)
</details>

PauseMenu
GameOverMenu
...

---------------------

Object inside another
Create new one
Add components?

-------------------

Use the position to set objects/camera, not your intuitive guess

transform.Rotate(_rotatingAxis, Time.deltaTime * angle, Space.World);
=> global y axis
Rotate takes a Vector3 argument as an Euler angle. The second argument is the rotation axes, which can be set to local axis (Space.Self) or global axis (Space.World). The rotation is by the Euler amount.
=> https://docs.unity3d.com/ScriptReference/Transform.Rotate.html

=> light with the sun transparent (mesh)
=> Destroy

var position = transform.position;
position = Vector3.MoveTowards(position, position-_step*Time.deltaTime, float.MaxValue);
transform.position = position;

GetComponent<Renderer>().enabled = true;

StartCoroutine(WaitForSecondsAndShow());
private IEnumerator WaitForSecondsAndShow()
{
	yield return new WaitForSeconds(timeBeforeAppearing);
	GetComponent<Renderer>().enabled = true;
	_stopMoving = false;
}

// Check collision
if (!_targetBounds.Intersects(_myRenderer.bounds)) return;
// near
if (Vector3.Distance(_targetBounds.center,_myRenderer.bounds.center) <= 0.001f)
// call method
SendMessageUpwards("StopMoving");

-----------

https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types

--------------

SceneLoader.LoadScene("name") => set the scene in the loadable scenes

---------------

Instantiate(obj, pos, rot)
Destroy(obj, time_before_death)

new Vector3().normalized (do not move faster diagonally if used set position)

Vector2.MoveTowards(start, target, speed) => easy for follow something

-----------------

OnTriggerEnter2D => run when our object collides with another
=> give both a collider set to trigger
=> one of them must have a rigid body

RigidBody => kinematic : no gravity

USE TAGS in collider easy to guess with who collided

-------------------

In 2D: freeze rotation (good for platformers)
=> camera INSIDE the player => follow

-------------------------

Light => shader => copy
=> https://github.com/TwoTailsGames/Unity-Built-in-Shaders
=> https://github.com/adrian-miasik/unity-shaders


-------------------------

Click on the "..." and debug to enable debug mode
=> ex: shadow casting on
=> do it from the code

--------------------

Directional light => rotate => black :(
=> Lightning => Environment => source: color

cast shadow (mesh rendered) off for walls
=> wall is not casting shadows on the player

Torch
=> point light orange
=> shadow type: hard => projected on the wall