import sys

import requests
import html2text
import urllib.parse


def _do_clean_injected_word(word):
    word = word.replace("<tab>", "\u0009")
    word = word.replace("<q>", "\u0027")
    word = word.replace("<er>", "2>&1")
    return word


def do_job(args, word):
    word = _do_clean_injected_word(word)
    if args.method == "GET":
        pu = args.parsed_url
        args.query_params[args.param] = [word]
        updated_query = urllib.parse.urlencode(args.query_params, doseq=True)
        updated_url = urllib.parse.urlunparse((pu.scheme, pu.netloc, pu.path, pu.params, updated_query, pu.fragment))
    else:
        updated_url = args.parsed_url
        body_data = args.data
        body_data[args.param] = word

    try:
        response = requests.request(args.method, updated_url, data=body_data, headers=args.headers, allow_redirects=args.allow_redirects)

        content = response.text
        if not args.is_raw:
            content = html2text.html2text(content)

        res_code = response.status_code
        res_size = int(response.headers.get('Content-Length') or 0)
        lines_count = len(content.splitlines())
        words_count = len(content.split())

        print(f'{word:<25} [Status: {res_code}, Size: {res_size}, Words: {words_count}, Lines: {lines_count}]')

        if args.is_verbose:
            print("\nResponse Headers:")
            print(response.headers)
            print("\nResponse Content:")
            print(content.replace("\n\n", "\n"))
    except Exception as e:
        print(f'[X] {e}')
