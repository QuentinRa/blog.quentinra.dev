import argparse
import sys
import urllib.parse

import cire.constants


def parse_arguments():
    parser = argparse.ArgumentParser(description="Command Injection Request Encoder")

    http_options = parser.add_argument_group("HTTP OPTIONS")
    payload_options = parser.add_argument_group("PAYLOAD OPTIONS")
    general_options = parser.add_argument_group("GENERAL OPTIONS")

    # HTTP Options
    http_options.add_argument("-u", dest="url", required=True, help="Target URL")
    http_options.add_argument("-p", dest="param", help="Name of the injected parameter.", required=True)
    http_options.add_argument("-i", dest="inject", help="Unencoded value to inject in parameter", required=True)
    http_options.add_argument("-X", dest="method", default="GET", help="HTTP Method (default=%(default)s)")
    http_options.add_argument("-H", metavar="header", dest="headers", action="append", help="Header 'Name: Value', separated by colon. Multiple -H flags are accepted.")
    http_options.add_argument("-d", dest="data", help="POST data.", default={})

    # PAYLOAD Options
    payload_options.add_argument("--s2t", dest="space2tab", action="store_true", help="Convert all spaces to tabs.")

    # General Options
    general_options.add_argument("-V", "--version", action="version", version=cire.constants.version, help="Show version information")
    general_options.add_argument("--raw", dest="is_raw", action="store_true", help="Raw HTML output")
    general_options.add_argument("--nr", "--no-redirect", action="store_true", help="Don't follow the response redirection.")
    general_options.add_argument("-v", dest="is_verbose", action="store_true", help="Verbose output")

    return parser.parse_args()


def verify_arguments(args):
    data = type('ProgramData', (), {
        'param': args.param,
        'method': args.method,
        'inject': args.inject,
        'is_verbose': args.is_verbose,
        'is_raw': args.is_raw,
        'allow_redirects': not args.nr
    })

    if args.space2tab:
        data.inject = data.inject.replace(' ', '<tab>')

    # compute URL
    if args.url.startswith("http"):
        data.url = args.url
    else:
        # noinspection HttpUrlsUsage
        data.url = "http://" + args.url

    if data.method == "GET":
        data.parsed_url = urllib.parse.urlparse(data.url)
        data.query_params = urllib.parse.parse_qs(data.parsed_url.query)
        if data.param not in data.query_params:
            print(f'Error: could not find {data.method} parameter "{data.param}".')
            sys.exit(1)
    else:
        data.parsed_url = data.url

    # computer headers
    data.headers = {}
    for header in args.headers or []:
        parts = header.split(":")
        data.headers[parts[0].strip()] = parts[1].strip()

    data.data = {k: v for k, v in [pair.split('=') for pair in args.data.split('&')]}

    return data