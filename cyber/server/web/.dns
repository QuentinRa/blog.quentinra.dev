## Domain Name Hijacking via Cache poisoning

<div class="row row-cols-md-2"><div>

This is a old attack that shouldn't be possible now. A hacker would usually try to make an authoritative server store a records which a legitimate domain names leading to a malicious server.

* Redirect to a malicious website <small>(ex: with a ton of ads, malware...)</small>
* Do a ManInTheMiddle attack, in which the attacker could receive the mails sent to another one, read/... them, and send them to the original legitimate receiver.
* Isolate someone to prevent this person to access a website/...

When a DNS server request a DNS record that wasn't cached, a request is made with **a query Id** (16 bits), awaiting the reply at a **port**, for the **queried domain**. The problem is that if a malicious DNS server managed to match these 3, and reply before the legitimate server, then it could match a malicious IP for the queried domain.

* Unless it was an old server increasing Ids by one, matching the query Id is quite hard
* And matching the right timing to send the request is also hard. One trick is making the request to a domain name that you could guess is not in the cache <small>(for instance, one of yours)</small>. As you know the TTL, you can guess when the next request will be sent.
</div><div>

**Dan Kaminsky**: this attack use the fact that inside the request, a field **Authority** might be filled with the nameserver/authoritative server that should be ask for matters related to this domain name. In the field **Additional**, the IPs of the nameserver are stored to avoid a loop in which the DNS will try to find the IP of the nameserver. In Dan Kaminsky attack, we are sending a malicious NS, that means that the DNS *may* ask us next time.

A way to patch this is for the DNS to have a good entropy when generating Ids. [See DNS Entropy](https://www.dns-oarc.net/oarc/services/dnsentropy).

This video is a bit long, but explain better [the Dan Kaminsky attack](https://www.youtube.com/watch?v=qftKfFVHVuY).
</div></div>