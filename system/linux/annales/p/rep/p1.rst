================================
1. Partiel 2018 ASR
================================

Exercice 1

| PC : compteur ordinal (fr), Program counter (en) contient l’adresse de la prochaine instruction.
| IR : indice register : contient l’instruction en cours d’exécution.
| PSR : Processor status register : stocke le statut du processeur

Exercice 2

1) Fetch : récupère l’instruction
2) Decode : Décompose le code de l’instruction, envoi au banc de registre ou à l’UAL les instruction qui leur sont adressés.
3) Read : lis les valeurs contenues dans les registres
4) Execute : L’ALU exécute l’instruction
5) Write back : écriture du résultat dans le registre de destination

Exercice 3

[[ condition ]] va regarder la condition et renvoyer un booléen 0 : vrai ou 1 : faux.
echo $? renvoi la valeur de retour renvoyée par la dernière instruction.
$variable = valeur stockée

(a)	tu=100 ; vous = 50 ; [[ tu > vous ]] ; echo $?

| compare selon l’ordre du dictionnaire, ‘t’ n’est pas avant ‘v’ donc la condition est fausse.
| echo affiche 1 (faux).

(b)	tu=249 ; vous = 4 ; [[ $tu < $vous ]] ; echo $?

|  On demande si 249 est avant 4 dans le dictionnaire.
| ‘2’ est avant ‘4’ donc la condition est vraie.
| echo affiche 0 (vrai)

(c)	tu=0x ; u = baf ; us=0xfab ; [[ $t$u -lt $vo$us ]] ; echo $?

| $vo = rien car vo n’est pas déclarée
| -lt va comparer les valeurs de ses variables.
| On va comparer si 0xbaf est plus petit que 0xfab
| baf en base 16 = 1011 1010 1111 en base 2 = 2735 en base 10
| fab en base 16 = 1111 1010 1011 en base 2 = 3883 en base 10
| 2735 est bien plus petit que 3883 donc la condition est vraie.
| echo affiche 0 (vrai)

.. note::

	pour savoir comment j’ai convertit de base 16 à base 2 d’abord,
	on se souvient qu’un nombre en base 16 = 4 en base 2 donc je convertis

	b = 1011 a = 1010 f = 1111

	après j’utilise les puissances de 2 :

	| 1\-\-\-\-\-\-0\-\-\-\-\-1\-\-\-\-1\-\-\-\-1\-\-\-\-0\-\-1\-\-0\-\-1\-1\-1\-1
	| 2048  1024 512    256      128   64  32   16        8    4     2    1

	en fait tout à droite la première puissance c’est :math:`2^0` puis on passe à :math:`2^1`
	donc j’ai juste additionné les nombres ou le bit est à 1

(d)	a = 254 ; [[ 6#$a -gt 5#$a ]] ; echo $?

| L’opérateur -gt regarde si la valeur de gauche et plus grande que celle de droite.
| base#valeur renvoi la valeur dans la base.
| On sait que le 5 de 254 n’existe pas en base 5, donc 5#254 ne marche pas et renvoi false.
| echo $? affiche 1.

Exercice 4

On sait qu’un nombre en base 16, en donne 4 en base 2 (et un nombre en base 8 en donne 3
mais ce n’est pas utile ici).

| 0x4FB2 = 0100 1111 1011 0010
| 0x80CE = 1000 000 1100 1110
| 0xC343 = 1100 0011 0100 0011
| 0x41CB = 0100 0001 1100 1011

Exercice 5

Ne pouvant pas faire de soustraction, on va additionner l'inverse
donc a-b devient a + -b. On utilise les valeurs en base 2 de l'exercice 4.

| 0x80CE = 1000 000 1100 1110
| complément à 2
| devient 0111 1111 0011 0010

Fait la somme

| retenues : 1111 1110 0110 0100
| \ 0100 1111 1111 0010
| + 0111 1111 0011 0010
| = (sortie=0) 1100 1110 1110 0100 soit CEE4

Il y a un débordement avec conséquences car le bit de sortie=0 et la dernière retenue (1) ne
sont pas du même signe.

Exercice 6

Même principe que précédemment, on obtient 0x8178.

Il y a un débordement sans conséquences car le bit de sortie=1 et la dernière retenue (1)
sont du même signe. Si on avait sortie=0 et retenue=0 alors pas de débordement.

Exercice 7

Entier signé = 1 bit pour le signe donc il reste 31 bits qui peuvent
prendre les valeurs 0 ou 1 donc :math:`2^{31}` nombres. On a donc
:math:`]-2^{31},0] \cup ]0,2^{31}]` soit :math:`]-2^{31}, 2^{31} - 1]`.

Exercice 8

(a)	integers contient offset x [bloc de 4 octet],
or on a 4 blocs de 4 octets donc 4 entiers signés (1 entier = 4octets = 32bits).

(b)

Non fait.

Exercice 9

La commande ls affiche une liste selon option et motif. L'option -d
signifie qu'elle doit chercher dans tout l'arborescence sous-jacente.
Le motif est "." soit exactement un caractère, une chaine (vide possible) puis
suivie de quelque chose qui n'est pas un $ puis un $.

Nombre minimal de caractères : . (1) + * (0) + [^$] (1) + $ (1) = 3.

Résultat : On cherche tous les fichiers/répertoires commençant par ayant au moins
3 caractères, qui finissent pas un $ et dont l'avant dernier caractère n'est pas un $.

Exercice 10

grep recherche les lignes des fichiers (ici fi.txt) qui correspondent a un regex.
-E dit a grep de traiter les ( au autre comme partie du regex et non comme un caractère.

On attrape soit les lignes qui contiennent uniquement et au moins une majuscule
ou les derniers caractères des lignes contenant un nombre entre 5 et 9 suivit d'au moins une
majuscule.

**Crédits**
	* Quentin Ramsamy--Ageorges (étudiant à l'ENSIIE