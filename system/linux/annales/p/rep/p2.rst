=================================================
1. Partiel 2021 Système d'exploitation
=================================================

Exercice 1 (Commandes shell, 5 points)
================================================

**1. Donner une commande shell qui imprime le contenu du répertoire de**
**login de l’utilisateur user quel que soit le répertoire coutant.**

.. code:: bash

	ls $(grep 'user' /etc/passwd | cut -d: -f6)

Explication : le fichier /etc/passwd contient les domiciles dans
le 6ème champ (sachant qu'ils sont séparés par ":"). On récupère la ligne
de user, on découpe en utilisant : comme séparateur et on prends le 6-ème morceau.

**2. Donner une commande shell différentes qui impriment le nom du répertoire**
**de login de l’utilisateur user quel que soit le répertoire courant**

.. code:: bash

	getent passwd user | cut -d: -f6

récupère dans le fichier /etc/passwd la 6e partie avec : comme séparateur. Plus d'explications
plus haut.

Alternative : :code:`grep 'user' /etc/passwd | cut -d: -f6`.

**3. Donner une commande shell qui affiche les noms de tous les fichiers**
**de suffixe .h du répertoire /tmp.**

.. code:: bash

	find /tmp -type f -name "*.h"

Dans /tmp on affiche tous les fichiers qui terminent par .h (récursif).
Si on ne veut pas un find récursif alors on fait

.. code:: bash

	find /tmp -maxdepth "1"  -name "*.h" -type f

**4. Donner une commande shell qui affiche le nombre de fichiers contenant**
**la chaîne de caractères \"Bob\" du répertoire \"/tmp\"**

.. code:: bash

	find /tmp -type f -exec grep -l \"Bob\" {} \\; | wc -l

Sur tous les fichiers de /tmp on fait un grep (avec -l pour retourner un boolean) et on compte
le nombre de lignes (donc de match).

**5. On rappelle que la variable d’environnement PATH donne les noms des**
**répertoires dans lesquels le système va chercher les commandes séparés**
**par des : (deux points). Donner une commande shell qui affiche les**
**premier et troisième répertoire.**

.. code:: bash

	find $(echo $PATH | tr ':' '\n') -maxdepth 0 -type d | tr '\n' ':' | cut -d: -f1,3 | tr ':' '\n'

La première étape est d'obtenir toutes les valeurs du path, une par ligne. Ensuite
on sait que find avec maxdepth de 0 retourne 1 seul résultat : le chemin (argument) du find, sauf
qu'on filtre uniquement sur les dossiers. On trouve donc tous les dossiers
du path mais un par ligne. On remets les : en séparateur, on prends
le 1 et le 3 élément et enfin on remet un élément par ligne.

:code:`Note` : cette question est vicieuse donc ce n'est pas la bonne réponse mais j'ai eu un kiff.

Exercice 2 (sed 2 points)
=============================

On considère le script sed suivant

:code:`sed -e "s/\([a-z]+\)\([0-9]+].*/\2\1/"`

**Analyse du sed**

Le sed ne marche pas, donc il retourne erreur peut importe l'entrée.

On peut faire des références arrières dans un regex donc faire en sorte
que capturer une expression que l'on pourra utiliser dans le motif de remplacement.
Ici, cela corresponds aux \2 et \1. Ils renvoient au groupe de référence
arrière :code:`\([a-z]+\)` et :code:`\([0-9]+].*` mais on voit bien qu'il faut mettre une parenthèse
pour finir le groupe (à la place du ]). Attention aussi aux :code:`+` qui correspondent sûrement
à la regex et qui doivent donc être remplacés par :code:`\+`.

On peut la placer avant le :code:`.*` ce qui donne

:code:`sed -e "s/\([a-z]\+\)\([0-9]\+\).*/\2\1/"`

	* :code:`\([a-z]+\)` : corresponds à au moins une lettre minuscule (1)
	* :code:`\([0-9]+\)` : corresponds à au moins un chiffre (2)
	* :code:`.*` : des caractères (ou aucun), on l'ignore

quel est son comportement sur les entrées

— abc123

On a bien 1 (abc) puis 2 (123) donc on inverse : retourne :code:`123abc`.

— 123abc

sed ne reconnait pas de regex donc retourne l'entrée non modifiée.

— abc123def

On a bien 1 (abc) puis 2 (123) donc on inverse, on ne garde pas def : retourne :code:`123abc`.

— 123abc123

On a 1 (abc), 2 (123) donc on inverse : :code:`123123abc`.

Exercice 3 (Script shell 3 points)
====================================

Écrire un script bash qui prend trois arguments "s", "n" et "f" et qui affiche
1 fois la chaîne de caractères s puis deux fois puis i avec un espace les séparant
dans le fichier f du répertoire "/tmp" et ainsi de suite jusque n. Si le fichier
f n’existe pas ou si il existe déjà ou si on a pas pu le créer on affichera un
message d’erreur pertinent.

Il y a plusieurs façon d'interpréter cette question, par exemple

.. code:: bash

	# version 1 (la mienne)
	$ ./script.sh "test" 3 "file.txt"
	$ cat /tmp/file.txt
	test test test test test test
	# version 2
	$ ./script.sh "test" 3 "file.txt"
	$ cat /tmp/file.txt
	test
	test test
	test test test
	# version 3
	$ ./script.sh "test" 3 "file.txt"
	$ cat /tmp/file.txt
	test test test
	# version 4
	$ ./script.sh "test" 3 "file.txt"
	# version 1 ou 2 mais avec 0 fois ?

.. code:: bash

		#!/bin/bash
		#
		# usage: ./script.sh <s> <n> <f>
		# repeat <s> 1 time, <s> 2 times, ..., n times
		# in file <f> in /tmp
		#
		# FileAlreadyExists : if file exists
		# CreateFileFailed : create failed

		# check des arguments
		if [ $# -ne 3 ]; then
		 echo "Usage : ./script.sh <s> <n> <f>"
		 exit
		fi

		s=$1
		n=$2
		f=/tmp/$3

		# vérifie si f existe déjà
		if [ -f $f ]; then
		 # redirect on error
		 echo "Error: FileAlreadyExists ($f)" 1>&2
		 exit
		fi

		# sauvegarde le retour de touch pour récupérer s'il y a une erreur
		t=$(touch $f 2>/dev/null)

		# regarde si t est non vide (donc erreur)
		if [ ! -z $t ] ; then
		 # redirect on error
		 echo "Error: CreateFileFailed (touch $f)" 1>&2
		 exit
		fi

		# vérifie si on peut écrire dans le fichier
		if [ ! -w $f ]; then
		 # redirect on error
		 echo "Error: CreateFileFailed ($f)" 1>&2
		 exit
		fi

		# on devrait faire une boucle for i in seq
		# en tout cas il vaut mieux ne pas stocker le résultat
		# dans une variable car si n grand alors problème de mémoire
		# donc on redirige la sortie sur $f
		#
		for (( i = 0; i < $n; i++ )); do
		 for (( j = 0; j <= i; j++ )); do
		  echo -n "$s"
		 done

		 # si c'est pas le dernier mot, alors on met un espace
		 if [ $(($i+1)) -ne $n ]; then
		  echo -n " "
		 fi;
		done > $f

		exit

Exercice 4 (fork 5 points)
============================

Écrire un programme C qui crée deux fils. Le père affiché "fait", le premier
fils affiche "il" et le deuxième affiche "ilbeau". Le comportement du du
programme est d’afficher "il fait beau" sur le sortie standard. Le père
attendra la fin de ses fils pour se terminer.

On utilisera uniquement les flux noyaux

.. code:: c

		#include <unistd.h> //fork
		#include <wait.h> //wait

		void child1(){
		 int w = write(1,"il",2);
		 if (w == -1){
		  perror("write failed");
		 }
		 exit(0); //vide les buffers car force fermeture
		}

		void child2(){
		  write(1,"il\b\bbeau",8); // reviens de 2 caractères (efface le il)
		  if (w == -1){
		   perror("write failed");
		  }
		  exit(0); //vide les buffers car force fermeture
		}

		int main(int argc, char ** argv) {
		  pid_t c1, c2;

		  c1 = fork();
		  if (c1 == 0){ //dans le fils 1
		    child1();
		  } else if (c1 == -1){
		    perror("fork child 1 failed");
		    exit(-1);
		  }

		  wait(NULL); // attends fils (on pourrait aussi sleep)

		  int w = write(1," fait ",6);
		  if (w == -1){
		    perror("write failed");
		  }

		  c2 = fork();
		  if (c2 == 0){ //dans le fils 2
		    child2();
		  }  else if (c2 == -1){
		    perror("fork child 2 failed");
		    exit(-2);
		  }
		  wait(NULL); // attends fils (on pourrait aussi sleep)

		  return 0;
		}

Exercice 5 (Généralités 5 points)
=======================================

.. image:: /assets/system/linux/annales/exo5.png

todo: à refaire.

**Crédits**
	* Quentin Ramsamy--Ageorges (étudiant à l'ENSIIE)