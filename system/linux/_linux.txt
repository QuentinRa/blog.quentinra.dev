6. Environnement
========================================

6.1 Variables d'environnement
********************************

Les variables d'environnement sont des variables telles qui contiennent des informations
clés sur l'environnement tel que

	* PATH : contient une liste de dossier dans lesquels chercher les commandes
	* HOME : contient le chemin de votre domicile
	* PWD : votre dossier actuel
	* LANG : langue de l'utilisateur
	* ...

.. note::

	Rappelez vous du tout est fichier sous linux, donc la commande :code:`ls` qui liste les fichiers/dossier
	d'un répertoire, est un script donc un fichier dans un certain repertoire (:code:`/bin/ls`).

	Pour éviter de devoir donner le chemin absolu ou relatif à chaque fois qu'on voudrais utiliser la commande,
	on l'ajoute à PATH, parce que dès qu'on tape une commande dans un terminal, alors on va regarder dans tous les
	dossier du path s'il y a un fichier avec ce nom, et si oui on va l'exécuter.

7. Scripts
========================================

Les scripts sont des fichiers qui contiennent des commandes, on peut voir ça comme un programme
qui une fois lancé va exécuter des instructions.

Un script peut contenir des fonctions (des bouts de code répétitif qui ont été factorisés
pour éviter de recopier du code). On appelle ces fonctions des :code:`buildin`.

.. note::

	On appelle une :code:`buildin` de la même façon que l'on appelle une commande, soit
	:code:`buildin [[-option] [argument]]`.

Les scripts demande la permission :code:`x` pour être exécutés, ou vous pouvez appeler
un langage en lui donnant un entrée le script : :code:`$ bash < script.sh` avec :code:`bash` ici
le langage dans lequel exécuter le script.

.. warning::

	La première ligne d'un script défini le langage du script, pour un script bash, la première ligne
	serait

	.. code::

		#!/bin/bash
		#
		# usage: utilisation du script
		#
		# détails
		#
		# ...

		# ici votre code

8. Processus et signaux
========================================

Un processus est une sorte de boite crée lorsque vous exécutez une commande.

Il contient entre autres

	* code (à exécuter)
	* l'environnement d'exécution : nom du programme, fichiers ouverts, droits, ...
	* des données (pile, tas, variables)

Chaque processus a un identifiant unique, appelé PID.

8.1 Hiérarchie
********************

Le processus 1, systemd est le parent de tous les processus. Un processus peut être
dupliqué, ce qui permet de créer de nouveaux processus (le processus 0 est celui qui init qui initie systemd).
Le PPGID est l'Id du processus parent.

.. note::

	Un processus qui finit par :code:`d` est généralement un daemon (linux) ou un
	un service (windows voir linux).

	Un daemon est un processus qui ne s'arrête jamais.

.. note::

	Comme tout est fichier sous linux, chaque processus est une sorte de fichier (nom=pid) dans :code:`/proc/`.

A sa mort, un processus retourne à son père un code de retour. Vous pouvez le consultez
avec la commande :code:`$ echo $?`.

.. note::

	Si le processus parent meurt, alors le parent du processus fils devient -1.

8.2 Ordonnancement
********************

Les processus (programmes) s’exécutent en presque en "parallèle" (pseudo-parallélisme).

L'ordonnanceur (ou le gouverneur) va faire en sorte que chaque processus puisse s'exécuter un petit peu,
puis est mis en pause pendant qu'un autre s'exécute, et ce en boucle.

.. note::

	Un processus n'est donc pas exécuté d'un coup, ses données sont mise en mémoire jusqu'à ce qu'il soit
	réveillé.

8.3 Signaux
*************

Les signaux sont des suites de touches qui sont réceptionnées par la session au premier plan (voir
ci-après pour session et arrière plan) et provoquent l'exécution d'une fonction par le processus.

Il y en a 34.

	* :code:`CTRL-C` (signal SIGINT) : exit donc met fin au processus
	* :code:`CTRL-Z` (signal SIGTSTP) : suspend donc met fin à une action (saisie, ...)

.. hint::

	:code:`CTRL-D` n'est pas un signal, il s'agit de EOF (End Of File) donc l'arrêt donc provoque
	l'arrêt d'une saisie.

8.4 Session et terminaux
*******************************

Un processus appartient à une session (sid), qui elle même appartient généralement à un terminal (tty).

Une session est partitionnée en groupes de processus.

.. note::

	Comme tout est fichier sous linux, un terminal se trouve dans :code:`/dev/tty`.

.. note::

	Si la session meurt, alors tous les processus reçoivent le signal SIGHUP.

8.5 Session et premier/arrière plan
************************************

Un seul groupe de processus d'une session est au 1er plan

	* peut bénéficier/droit aux entrées/sorties
	* peut lire/écrire
	* reçoit signaux (CTRL-C)

Les autres groupes sont à l’arrière-plan

	* ne peuvent pas lire/écrire sur le terminal
	* ne reçoivent pas les signaux (sauf CTRL-Z)

.. warning::

	Par défaut dans certains cas, les processus en arrière plan peuvent écrire sur le terminal.
	Il est possible de changer ce comportement en modifiant une variable d'environnement.

9. Appels systèmes
========================================

...