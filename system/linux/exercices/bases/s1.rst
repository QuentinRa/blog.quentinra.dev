================================
1. Message crypté
================================

.. image:: https://img.shields.io/badge/correction-vérifiée-green.svg?style=flat&amp;colorA=E1523D&amp;colorB=007D8A
   :alt: correction vérifiée

.. code:: bash

		# La commande hexdump permet de convertir un fichier txt.
		# L'option -b convertit en octal, le résultat est 16 colonnes séparés par des espaces.
		# L'option -e permet de définir comment on va convertir (=personnalisée).
		# L'option -v fait que hexdump qui normalement met * si deux lignes identiques va maintenant l'afficher.

		# 1) Comment à été passée la commande hexdump ...

		# ... pour le fichier message.oct :
		$ hexdump -b message.txt > message.oct

		# ... pour le fichier message.hex :
		#
		# On note %x pour hexadécimal, que chaque ligne contient 16 nombre, 8 puis un grand espace puis
		# 8 autres et que chaque ligne contient un 1er champ 00000... . On note également que chaque chiffre
		# prends 2 emplacements, et 0 si vide.
		#
		# On ajoute que _a[dox] affiche le nombre de byte depuis le début du fichier avec [dox] = soit d,
		# o ou x. (déci,oct,hex)
		#
		# Affiche tous les nombres à la suite.
		$ hexdump -e '" %x"' message.txt
		# Affiche 16 nombres par ligne et on saute une ligne après.
		$ hexdump -e '16/1 " %x""\n"' message.txt
		# Affiche 8 nombres puis espaces puis 8 nombres et saut de ligne
		$ hexdump -e '8/1 " %x" "  " 8/1 " %x" "\n"' message.txt
		# Attribue deux emplacement à chaque nombre.
		$ hexdump -e '8/1 " %2x" "  " 8/1 " %2x" "\n"' message.txt
		# On cole un zéro devant ceux qui en n'ont qu'un nombre.
		$ hexdump -e '8/1 " %02x" "  " 8/1 " %02x" "\n"' message.txt
		# Affiche le 1er champ
		$ hexdump -e '"%_ax" 8/1 " %02x" "  " 8/1 " %02x" "\n"' message.txt
		# On met 8 caractère du 1er, 0 si ya rien.
		$ hexdump -e '"%08_ax" 8/1 " %02x" "  " 8/1 " %02x" "\n"' message.txt
		# On affiche les lignes identiques.
		$ hexdump -v -e '"%08_ax" 8/1 " %02x" "  " 8/1 " %02x" "\n"' message.txt
		#
		# Et enfin on redirige la sortie vers message.hex
		#
		$ hexdump -v -e '"%08_ax" 8/1 " %02x" "  " 8/1 " %02x" "\n"' message.txt > message.hex

		# 2) Que signifie le 1er champs de chaque ligne :
		#
		# Comme on l'as vu avec _a[dox], le 1er champ de chaque ligne est est compteur qui
		# compte le nombre de bits depuis la début du fichier.
		# 000000000 : 0
		# 000000010 : 16
		# 000000020 : 32
		# 00000002e : 14+16*2=32+14= 46

		# 3) Quel est la taille de massage.txt :
		# On peut voir que la dernière ligne est 00...02e donc on calcule 2e ce qui donne 46.
		# La taille de message.txt est de 46 octect.

		####################################
		# On travaille sur message.hex
		####################################

		# 1. Le caractère formé par le 2eme champ de message.hex.
		#
		# On rappelle que une grande partie du shell est semblable au langage c,
		# ainsi on peut essayer de relier char et notre demande.
		#
		# On se souvient de l'option -e a écho qui lui prévient qu'il peut obtenir un résultat bizarre,
		# c'est pas grave.
		$ echo -e '\x54' # ce qui rappelle le format des getchar() et putchar()
		T

		# 2.Les caractères formés par les 2eme et 3e champs de message.hex.
		$ echo -e '\x54\x72'
		Tr

		# 3.On retire la 1er champ de chaque ligne et on met \x a la place d'une suite d'espaces.
		# S'il trouve EXACTEMENT 8 chiffres alors les remplace par rien
		$ sed -E 's/[[:xdigit:]]{8}//' message.hex > message.hex1
		# remplace espaces par \x
		$ sed -E 's/[[:space:]][[:space:]]*/\\x/g' message.hex1 > message.hex2

		# 4. On reconstitue message.txt :
		# on supprime les \n
		$ tr -d '\n' < message.hex2 > message.hex3
		# On sort le message convertit dans message.hex4 car \x à la fin
		$ echo -e $(cat message.hex3) > message.hex4
		$ sort -r message.hex4 | tail -n+2 > message.txt
		# On trie avec -r pour mettre \x au début et on prends la fin avec tail, on redirige la sortie dans message.txt.

		$ cat message.txt
		Troops are gathering - stop.
		Retreat! - stop.

		# 5. On vérifie la taille :
		$ ls -l
		-rw-r--r-- 1 quentin quentin   46 oct.  30 14:05 message.txt
		# La taille est bien de 46 octect.

		####################################
		# On travaille sur message.oct
		####################################

		# 1. Le caractère formé par le 2eme champ de message.hex.
		$ echo -e '\0124'
		T

		# 2.Les caractères formés par les 2eme et 3e champs de message.hex.
		$ echo -e '\0124\0162'
		Tr

		# 3.On retire la 1er champ de chaque ligne et on met \0 a la place d'une suite d'espaces.
		$ sed -E 's/[[:xdigit:]]{7}//' message.oct > message.oct1
		$ sed -E 's/[[:space:]][[:space:]]*/\\0/g' message.oct1 > message.oct2

		# 4. On reconstitue message.txt :
		$ tr -d '\n' < message.oct2 > message.oct3
		$ echo -e $(cat message.oct3) | sed '$d' > message.txt
		# sed '$d' permet de supprimer uniquement la dernière ligne , d = supprimer et $ =fin du fichier.

		# 5. On vérifie la taille :
		$ ls -l
		-rw-r--r-- 1 quentin quentin   46 oct.  30 14:21 message.txt
		# La taille est bien de 46 octet.

**Crédits**
	* Quentin Ramsamy--Ageorges (étudiant à l'ENSIIE)