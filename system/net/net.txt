			Protocoles                   <files/proto/index>
			Mod√®le OSI                   <files/proto/osi>
			Protocoles : TCP, UDP, IMCP  <files/proto/bunch>
			Protocole IP                 <files/proto/ip>
			Ethernet                     <files/proto/eth>

  TCP/IP

  	* Application : app, pr√©, session (http: Get /, ...)
  	* Trans : trans : tcp/udp (savoir a qui envoy√©, socket, port)
  	* R√©seau : R√©seau/Internet : ethernet et ip4/ipv6
  	* Liaison/Physique : Acc√®s au r√©seau : r√®gle d'acc√®s au m√©dia : wifi, adsl, ethernet

  Donn√©e brute : charge utile ? header pour tous les protocoles n√©cessaires. Paquets.
  l'encapsulation dans diff√©rent protocoles.
  d√©s-encapsulation.

$ dig +short lunix120.ensiie.fr
 ip

A envoi B via A-R=1500 et R-R2=1000 R2-B=15000
paquets PDU=1200
fragment√© en 2 paquets (x2 header)
mais on ne sait pas le comportement en R2-B


UDP
 Surcouche sur IP pour les applications.
‚Äì flux de messages
‚Äì aucune garantie qu‚Äôun message arrive
‚Äì aucune garantie qu‚Äôun message re√ßu est correct
 options:
‚Äì controle d‚Äôerreur de transmission
 Peu utilis√©.

TCP
Mode connect√©
‚Äì flux octets bidirectionnel
‚Äì contr√¥le d‚Äôerreur de transmission
‚Äì contr√¥le de flux au niveau applicatif
‚Äì contr√¥le de flux au niveau r√©seau
‚Äì s‚Äôadapte au r√©seau physique:
- si alt√©ration de PDU =) diminue la taille des PDU
- si perte de PDU (congestion du r√©seau) =) diminue le d√©bit
Options:
‚Äì envoi et r√©ception de donn√©es hors flux
Tr√®s utilis√©.

TCP
x, envoi
seq=x
y, r√©ponse
seq=y, ack=x+1
r√©ponse
ack=y+1