			Protocoles                   <files/proto/index>
			Mod√®le OSI                   <files/proto/osi>
			Protocoles : TCP, UDP, IMCP  <files/proto/bunch>
			Protocole IP                 <files/proto/ip>
			Ethernet                     <files/proto/eth>


	Il s'agit de la mani√®re dont les donn√©es sont transf√©r√©s. Les machines se mettent d'accord
	sur le protocole pour que √©viter des mauvaises interpr√©tations.

	Il existe quelques protocoles connus au niveau machine qui sont UDP, TCP, ...

	Au niveau programmeur, le protocole consiste √† d√©terminer le type des informations envoy√©s,
	les s√©parateurs, etc...

Protocole
	Fa√ßon dont les donn√©es sont √©chang√©es.

	TCP, IP, ...

	Format et structure
	M√©thode de partage/transfert
	Gestion des erreurs
	D√©but et Fin.

	Couche
  	Fait des couches comme √ßa un protocole qui s'appuie sur le notre ne refait pas tout de z√©ro.

  	Protocole sup√©rieur HTTP.
  	Protocole Edge, Apache, Firefox, ... qui impl√©mentent HTTP donc peuvent parler en eux.

  	Couches sont ind√©pendantes.

  7 couches OSI
  TCP/IP

  	* Application : app, pr√©, session (http: Get /, ...)
  	* Trans : trans : tcp/udp (savoir a qui envoy√©, socket, port)
  	* R√©seau : R√©seau/Internet : ethernet et ip4/ipv6
  	* Liaison/Physique : Acc√®s au r√©seau : r√®gle d'acc√®s au m√©dia : wifi, adsl, ethernet

  Donn√©e brute : charge utile ? header pour tous les protocoles n√©cessaires. Paquets.
  l'encapsulation dans diff√©rent protocoles.
  d√©s-encapsulation.

  https://www.developpez.net/forums/d1422341/systemes/reseaux/protocoles/comprendre-entites-protocolaires/

  Fait API
  	D√©termine les fonctions pour communiquer (ex: fct qui fait tout, ou alors une fct init, close, ...)

https://fr.linkedin.com/learning/les-fondements-des-reseaux-les-protocoles-et-les-outils-cli/comprendre-la-notion-de-protocole-et-de-couches-protocolaires

Port
	Il s'agit de l'endroit par lequel les donn√©es vont transiter.

	Ex : ftp (21), ssh (22), ...

Service
	Les point d'entr√©es/sorties d'un protocole. Le concept associ√© est un socket=prise. Chaque
	machine va ouvrir un tuyau √† un port, pour faire transiter les donn√©es.

PDU (Protocol Data Unit)
	Message √©chang√©. On d√©termine si c'est int, string, ...

	Pour les entiers l‚Äôendianness est sp√©cifi√©e, le format des flottants, le charset
  pour les caract√®res et les cha√Ænes de caract√®res, .

  https://www.fun-mooc.fr/c4x/MinesTelecom/04003S03/asset/c_4_t.pdf
  https://www.developpez.net/forums/d1422341/systemes/reseaux/protocoles/comprendre-entites-protocolaires/
  https://www.edrawsoft.com/fr/network-protocol.html
  https://fr.linkedin.com/learning/les-fondements-des-reseaux-les-protocoles-et-les-outils-cli/apprehender-l-encapsulation-de-donnees?autoplay=true&trk=learning-course_table-of-contents_video&upsellOrderOrigin=default_guest_learning

Routeur/HUB
	Fait le transit entre les machines de r√©seaux diff√©rents.

	message soient arriv√©s, dans l'ordre, int√®gres

	Probl√®me des collisions
   Explique les diff√©rences entre les d√©bits des supports et r√©els

  Ports

  $ dig +short lunix120.ensiie.fr
  ip

A envoi B via A-R=1500 et R-R2=1000 R2-B=15000
paquets PDU=1200
fragment√© en 2 paquets (x2 header)
mais on ne sait pas le comportement en R2-B


UDP
 Surcouche sur IP pour les applications.
‚Äì flux de messages
‚Äì aucune garantie qu‚Äôun message arrive
‚Äì aucune garantie qu‚Äôun message re√ßu est correct
 options:
‚Äì controle d‚Äôerreur de transmission
 Peu utilis√©.

TCP
Mode connect√©
‚Äì flux octets bidirectionnel
‚Äì contr√¥le d‚Äôerreur de transmission
‚Äì contr√¥le de flux au niveau applicatif
‚Äì contr√¥le de flux au niveau r√©seau
‚Äì s‚Äôadapte au r√©seau physique:
- si alt√©ration de PDU =) diminue la taille des PDU
- si perte de PDU (congestion du r√©seau) =) diminue le d√©bit
Options:
‚Äì envoi et r√©ception de donn√©es hors flux
Tr√®s utilis√©.

TCP
x, envoi
seq=x
y, r√©ponse
seq=y, ack=x+1
r√©ponse
ack=y+1