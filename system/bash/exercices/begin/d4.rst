======================================
4. Code de retour et redirections
======================================

.. image:: https://img.shields.io/badge/correction-vérifiée-green.svg?style=flat&amp;colorA=E1523D&amp;colorB=007D8A
   :alt: correction vérifiée

echo $? renvoit 0 si l'opération précédente est un succès et 2 ou plus si c'est un échec.

Forme simple :

.. code:: bash

	$ echo Hello world
	# affiche Hello world
	$ echo $?
	# affiche 0 car requête précédente réussie
	$ ls fi
	# affiche fi car fi existe dans ce dossier.
	$ echo $?
	# affiche 0 car l'opération s'est bien détroulée.
	$ ls -l fi
	# affiche -rw-r--r-- [...] 19:29 fi car fi existe.
	$ echo $?
	# affiche 0 car l'opération s'est bien détroulée.
	$ ls nofi
	# affiche un erreur car pas de nofi dans ce dossier.
	$ echo $?
	# affiche alors 2 car erreur dans la commande précédente.

	# Pipeline
	$ echo Hello world1! | echo Hello world2!
	# On remplace la sortie de echo ...1 par echo...2
	$ echo Hello world2! | echo Hello world1!
	# On remplace la sortie de echo ...2 par echo...1

	# Liste :

	$ ls fi ; echo $?
	# affiche fi puis 0 car réussi
	$ ls nofi ; echo $?
	# affiche erreur puis 2 car echec
	$ ls fi && echo Hello world! ; echo $?
	# ls fi marche donc on fait aussi echo ... et echo retourne 0 car && à réussi.
	$ ls nofi && echo Hello world! ; echo $?
	# ls nofi marche pas donc on fait pas echo ... et echo retourne 2 car echec.
	$ ls fi || echo Hello world! ; echo $?
	# ls fi marche donc on execute pas echo ... et echo retourne 0
	$ ls nofi || echo Hello world! ; echo $?
	# ls nofi marche pas donc on fait echo... et echo retourne 0 car echo... réussi.
	$ ls nofi || ls fi ; echo $?
	# ls nofi marche pas donc on fait ls fi et echo retourne 0 car ls fi reussi.
	$ ls fi || ls nofi ; echo $?
	# ls fi marche donc on fait pas ls nofi et echo retourne 0 car ls fi reussi.
	$ ls nofi && ls fi ; echo $?
	# ls nofi marche pas donc on fait pas ls fi et echo retourne 2 car ls nofi echec.

	# Lorsque qu'on parle de sortie, il faut en distinger deux : la sortie standard et la sortie d'erreur.
	# Lorsque l'on tape une commande, les deux sorties ne sont pas afficher distinctement mais les erreurs sont
	# dans une sortie dite d'erreur et le reste (ce qui à marché) va dans la sortie standard.
	# On précise que la sortie standard est la 1 et que la sortie d'erreur est la 2; ne rien mettre équivaut
	# à mettre 1.
	#
	# Bilan : sortie standard (=réussi se note 1 ou rien) et sortie d'erreur (=echec se note 2)

	$ ls nofi fi
	# erreur avec nofi car nofi existe pas mais affiche fi.
	$ ls nofi fi > output
	# redirige la sortie standard soit fi dans output.
	$ cat output
	# affiche fi car on n'as pas redirigé la sortie d'erreur.
	$ ls nofi fifi > output
	# redirige la sortie standard soit fifi dans output
	$ cat output
	# affiche seulement fifi car on n'as fais une redirection a la suite (>>)
	$ ls nofi fi >> output
	# redirige la sortie standard soit fi A LA SUITE dans output.

	$ ls nofi fi 2> error
	# redirige la sortie d'erreur de ls nofi dans error et affiche ls fi
	$ cat error
	# le résultat de la sortie d'erreur de nofi.
	$ ls fi nofifi 2> error
	# affiche ls fi et redirige la sortie d'erreur de ls nofifi dans error
	$ cat error
	# le résultat de la sortie d'erreur de nofifi seulement (pas de a la suite >>)
	$ ls nofi fi 2>> error
	# redirige la sortie d'erreur de ls nofi a la suite dans error et affiche ls fi

	$ ls nofi fi > output 2> error
	# redirige la sortie standard dans output et la sortie d'erreur dans error.
	$ cat output
	# affiche la sortie standard soit de ls fi
	$ cat error
	# affiche la sortie d'erreur soit de ls nofi
	$ ls nofi fi > both 2>&1
	# redirige la sortie standard dans both et la sortie d'erreur avant la sortie standard
	$ cat both
	# affiche la sortie d'erreur soit ls nofi avant la sortie standard soit ls fi.

	# La commande wc permet d'affiche le nombre de lignes, mots et caractères d'un fichier.

	$ wc
	# <je tape des trucs au pif, CTRL-D pour terminer>
	# je sais que nous
	# cherchons tous un jour
	# quelque chose que nous <CTRL-D>
	# j'observe le résultat
	4 28 166
	# On obtient bien 4 pour 4 lignes, 28 pour 28 mots et 166 pour 166 caractères.

	$ wc both
 	2 13 76 both
 	$ cat both
	ls: impossible ... nofi: Aucun fichier ou dossier de ce type
	fi
	# On peut compter et vérifier que cat contient bien 2 lignes, 13 mots et 76 caractères.
	$ wc < both # on utilise comme entrée pour wc le fichier both
	2 13 76 both # on obtient (logique) le même résultat que wc both

	$ ls -l /etc/ > output
	# on fais sur ls -l (liste avec infos) sur /etc/ et la sortie est redirigée dans output
	$ cat output
	# on affiche la sotie standard de ls -l /etc/
	$ wc < output
	# bah on a exécuté wc en prenant comme entrée output = wc output ou ls -l /etc/ | wc
	$ ls -l /etc/ | wc
	# bah merde... donc on fais ls -l /etc/ et on fais wc sur la sortie de la commande.

**Crédits**
	* Quentin Ramsamy--Ageorges (étudiant à l'ENSIIE)
