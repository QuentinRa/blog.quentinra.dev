========================================
1/1 Parcours en profondeur et en largeur
========================================

.. image:: https://img.shields.io/badge/correction-vérifiée-green.svg?style=flat&amp;colorA=E1523D&amp;colorB=007D8A
   :alt: correction vérifiée

.. graphviz::

	digraph {
			size="10";
  		rankdir="LR";
      h -> i [arrowhead = none];
      i -> j [arrowhead = none];
      i -> g [arrowhead = none];
      j -> e [arrowhead = none];
      e -> b [arrowhead = none];
      e -> a [arrowhead = none];
      k -> b [arrowhead = none];
      b -> a [arrowhead = none];
      a -> f [arrowhead = none];
      f -> g [arrowhead = none];
      g -> d [arrowhead = none];
      d -> k [arrowhead = none];
      d -> b [arrowhead = none];
      d -> c [arrowhead = none];
   }

Question 1
******************

Question 1.1
-------------------

Appliquer l’algorithme de parcours en profondeur au graphe ci-dessus en partant du nœud de votre choix.

.. hint::

	On applique l'algorithme du cours.

.. code:: none

		| On part du sommet h, on l'empile.
		| On se déplace sur un sommet non parcouru de h, soit i et on empile i
		| On se déplace sur un sommet non parcouru de i, soit j et on empile j
		| On se déplace sur un sommet non parcouru de j, soit e et on empile e
		| On se déplace sur un sommet non parcouru de e, soit b et on empile b
		| On se déplace sur un sommet non parcouru de b, soit a et on empile a
		| On se déplace sur un sommet non parcouru de a, soit f et on empile f
		| On se déplace sur un sommet non parcouru de f, soit g et on empile g
		| On se déplace sur un sommet non parcouru de g, soit d et on empile d
		| On se déplace sur un sommet non parcouru de d, soit c et on empile c
		| c n'a pas de voisin non parcouru, on le marque en bloquant, on revient à d
		| On se déplace sur un sommet non parcouru de d, soit k et on empile k
		| k n'a pas de voisin non parcouru, on le marque en bloquant, on revient à d
		| d n'a pas de voisin non parcouru, on le marque en bloquant, on revient à g
		| g n'a pas de voisin non parcouru, on le marque en bloquant, on revient à f
		| f n'a pas de voisin non parcouru, on le marque en bloquant, on revient à a
		| a n'a pas de voisin non parcouru, on le marque en bloquant, on revient à b
		| b n'a pas de voisin non parcouru, on le marque en bloquant, on revient à e
		| e n'a pas de voisin non parcouru, on le marque en bloquant, on revient à j
		| j n'a pas de voisin non parcouru, on le marque en bloquant, on revient à i
		| h n'a pas de voisin non parcouru, on le marque en bloquant, on revient à h
		| result:{h, i, j, e, b, a, f, g, d, c, k}, bloquants: {c, k, d, g, f, a,b,e,j,i,h}
		| -- fin

Question 1.2
-------------------

Pourquoi pouvez-vous affirmer que ce graphe est connexe ?

On est passé par tous les sommets donc le graphe est connexe.

Question 1.3
-------------------

Quelle est la complexité de l’algorithme ?

Réponse internet : :math:`O(|V|+|E|)`

Question 2
******************

Question 2.1
-------------------

Appliquer l’algorithme de parcours en largeur au graphe ci-dessus en partant du nœud de votre choix.

.. hint::

	On applique l'algorithme du cours, on introduit cependant f(x), une fonction
	qui prends un sommet et retourne les voisins non marqués.

.. code:: none

	| On part du sommet h, on l'ajoute
	| f(h) = {i} : on l'ajoute i
	| f(i) = {j,g} : on ajoute j,g
	| f(j) = {e},  f(g) = {f,d} : on ajoute e,f,d
	| f(e) = {b, a},  f(f) = {a}, f(d) = {b, k, c} : on ajoute b, a, k, c
	| f(b) = {}, f(a) = {}, f(c) = {}, f(k) = {} : les feuilles sont vides donc terminé
	| résultat: {h,i,j,g,e,f,d,b,k,c}

Question 2.2
-------------------

Pourquoi pouvez-vous affirmer que ce graphe est connexe ?

On est passé par tous les sommets donc le graphe est connexe.

Question 2.3
-------------------

Quelle est la complexité de l’algorithme ?

Réponse internet : :math:`O(|V|+|E|)`

Bonus
-----------------

Autre parcours

.. code:: none

	| h->i->h : h terminé
		| i->j->i->g->i : i terminé
			| j->e->j : j terminé
				| e->b->e->a->e : e terminé
					| b->d->b->k->b->a->b : b terminé
						| d->k->d->c->d->g->d : d terminé
							| k : k terminé
							| c : c terminé
							| g->f->g : g terminé
								| f->a->f : f terminé
									| a : a terminé
						| k déjà terminé
						| a déjà terminé
					| a déjà terminé
			| g déjà terminé

	Donc résultat : h,i,j,e,b,d,k,c,g,f,a

|

**Crédits**
	* Quentin RAMSAMY--AGEORGES (étudiant à l'ENSIIE)