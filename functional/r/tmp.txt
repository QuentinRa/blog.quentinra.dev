package magrittr.

Notez que vous pouvez faire une fonction variadique (donc qui prends
un nombre d'argument variable) en mettant un dernier argument :code:`...`.

6. Gérer son environnement
============================

Fonctions de déplacement

	* :code:`getwd()` : retourne le répertoire courant
	* :code:`sedwd(path)` : change le répertoire courant
	* :code:`dir()` ou :code:`list.files()` : liste les fichiers du répertoire
	* :code:`source(path)` : exécute un fichier R (path/url)
	* :code:`cat(path, sep = S)` : affiche fichier R (S = \\n, ...)
	* :code:`readLines(path)` : lis un fichier R

Fonctions de manipulation

	* :code:`file.path(partie, partie, ...)` : crée un path [#2]_
	* :code:`dir.create(path)` : créer un dossier
	* :code:`file.create(path)` : créer un fichier
	* :code:`file.exists(path)` : TRUE si existe sinon FALSE
	* :code:`file.info(path)` : infos sur un fichier
	* :code:`file.copy(path,new_path)` : copie un fichier
	* :code:`file.rename(path,new_path)` : renomme un fichier

.. [#2] :code:`file.path("dossier1", "dossier2", "fichier")`. Le path marche sous tout
	système d'exploitation (donc mettra des / sous Linux et des \\ sous Windows).

Manipulation de chaine de caractères

	* :code:`paste(s1, ..., collapse = C)` : fusionne les résultats en les séparant par C
	* :code:`paste(s1, ..., sep = S)` : s1, ... sont fusionnés avec le séparateur S entre

Vous pouvez générer des fichiers contenant un graphique les fonctions (:code:`pdf(path)`,
:code:`jpeg(path),`, :code:`png(path)`, ...). Elle créent un périphérique graphique
qui sera utilisé plutôt que celui par défaut pour dessiner le graphique. Pour fermer
le périphérique, utilisez :code:`dev.off()`. Vous pouvez aussi faire
une sauvegarde du device avec :code:`dev.copy(device=format,"nom")`.

7. Affichage graphique
========================

Les fonctions basiques sont : :code:`plot` (graphique),
:code:`hist` (histogramme), curve, pie, barplot, biplot, image, ...
Elles ont toutes les mêmes arguments ou presque

	* :code:`main = "titre"` : titre
	* :code:`xlab = "titre x"` : titre de l'axe x
	* :code:`ylab = "titre y"` : titre de l'axe y
	* :code:`xlim = valeur` : limite supérieure x
	* :code:`ylim = valeur` : limite supérieure y
	* :code:`col = couleur` : couleur de qqch (ex: red(1.0), package crayon)
	* :code:`border = couleur` : couleur de bordure (histogramme, ...)
	* :code:`breaks = seq(...)` : augmenter le séquencement (histogramme, plus de blocs)
	* :code:`type = "l"` : l=ligne, b=ligne avec points (plot)

Il faut utiliser :code:`proba = TRUE` pour pouvoir par exemple obtenir
la densité (:code:`density(..., adjust = valeur)`). Si valeur vaut plus petite
que 1 alors on regarde le cas discret et si la valeur est plus grande alors on
regarde le cas continu.

Si vous avez beaucoup de points qui se superposent, vous pouvez utiliser
:code:`jitter` ou :code:`sunflowerplot` pour identifier les endroits concernés.

Certains fonctions peuvent prendre une table et donne un graphique :
:code:`hist` (donne un diagramme batons), :code:`pie` (camembert), :code:`balloonplot`
(tableau de contingence)....

Les fonctions de dessin (appliquées sur le dernier graphique)

	* :code:`points` : dessine des points
	* :code:`line` : dessine des points
	* :code:`legend` : ajouter une légende
	* :code:`title` : ajouter un titre
	* :code:`mtext` : ajouter un texte
	* :code:`abline` : trace une droite y=bx+a (paramètres h=x ou v=y si besoin)
	* Autres : rect, segments, polygon, box, grid, ...

La fonction par permet de définir l'environnement (fond, ...) et est utilisée
avant les dessins pour les prochains dessins (ex: :code:` par(bg="...")`).