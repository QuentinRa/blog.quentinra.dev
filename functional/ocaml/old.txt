
Il est possible d'avoir plusieurs paramètres à une fonction, séparés
par une virgule (:code:`function (x,y,...) -> code` et :code:`nom (arg1, ...)`.

On peut aussi réécrire la fonction en une fonction
de fonction de ...

.. code:: ocaml

	let somme_x_y = function x -> (function y -> x + y) ;;
	somme_x_y (5) (8) ;; (* la fonction prends 2 arguments *)
	let somme_5_y = somme_x_y (5) ;;
	somme_5_y 8 ;; (* pareil que somme_x_y (5) (8) *)

Boucle
	On peut modéliser une boucle avec une fonction récursive.

	.. code:: ocaml

		let boucle n =
		 (
			let rec boucle_i =
			 function (i) ->
				if i = n
				 then ()
				else
				begin
				 (* du code de la boucle *)
				 print_string(string_of_int (i)^"\n");
				 boucle_i(i+1);
				end
			 in boucle_i (0)
		 );;

		boucle 5

Couplets/Types composites
	En fait lorsque vous faites (valeur1, valeur2) par exemple lors d'un appel de fonction,
	vous créez un type de type (type valeur 1, type valeur 2). Vous pouvez ainsi créer
	autant de types de voulu. Les valeurs n'ont pas besoin d'avoir le même type.

	.. code:: ocaml

		# let (a,b,c) = (5, "test", 3.0) ;;
		int * string * float = (5, "test", 3.)