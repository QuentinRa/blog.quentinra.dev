-----------------------------------------------------------------
------------------------- Unity
-----------------------------------------------------------------
Lightning => auto generate => disable if level goes darker

"Naming"
Managers => enemy manager (TargetExists, GetNearestTarget, SetRandomDestination)
System => projectile system
Component => weapon (FireWeapon)
Item => InventoryItem (Torch=Weapon?, Key=Consumable?)

StateMachine => OnStateEnter / OnStateUpdate / OnStateExit

Game resolution

Debug.Log => console + File (slow)
Debug.Log("<color=red>Warning!</color>");
Debug.Log($"$(variable)");
You may use https://docs.unity3d.com/Manual/PlatformDependentCompilation.html
Profiler to see the performances
Use your IDE debugger
-----------------------------------------------------------------
------------------------- Game Objects
-----------------------------------------------------------------
Scriptable objects => data about something => non runtime data = static data = fixed values
=> you can references them in any scene
=> CreateAssetMenu => ScriptableObject

transform.GetSiblingIndex (hierarchy)
-----------------------------------------------------------------
------------------------- Scenes
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Tile map
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Input
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Camera
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Components
-----------------------------------------------------------------
TextMeshPro to write text as a game object.
-----------------------------------------------------------------
------------------------- Scripts
-----------------------------------------------------------------
var
private type Attribute => attr;
namespace
-----------------------------------------------------------------
------------------------- Materials
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Animations
-----------------------------------------------------------------
Idle => Walking => Shooting

Create animations

Create animator
=> states (create empty state) => or drag and drop animations
=> parameters (idle, ...) => has exit time uncheck?
=> conditions on arrow
=> click on a transition and in settings prevent them from overlapping
=> you can attach scripts to states, if they extends StateMachineBehaviour
=> you can add animation events => call to a function

Drag and drop to player/add animation

Window => Animation => Animation
=> add property => rotation ("animate rotation")

Animator.SetTrigger("name") SetInteger(value)
-----------------------------------------------------------------
------------------------- LIGHT and SHADOWS
-----------------------------------------------------------------
Light => shader => copy
=> https://github.com/TwoTailsGames/Unity-Built-in-Shaders
=> https://github.com/adrian-miasik/unity-shaders

Directional light => rotate => black :(
=> Lightning => Environment => source: color

cast shadow (mesh rendered) off for walls
=> wall is not casting shadows on the player

Torch
=> point light orange
=> shadow type: hard => projected on the wall

=> light with the sun transparent (mesh)
-----------------------------------------------------------------
------------------------- Random bunch of notes
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- UserInterface (UI)
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- FAQ
-----------------------------------------------------------------

Inventory
=> slots (array of fixed size? or a list, check linq)
=> Swap(index, index) => same index (return), check stack (merge if same item and stack ok)
=> GetTotalQuantity(item) => check every slot, may be multiples stacks
=> HasItem(item)
=> AddItem(slot) => add in stack (whole or a part),
=> RemoveItem(slot) => remove the quantity given if you slot. If empty then destroy. Reduce given slot quantity. Check others slots.
=> RemoteAt(index)

Slot
=> item
=> quantity

Item
=> maxStack