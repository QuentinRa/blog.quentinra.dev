-----------------------------------------------------------------
------------------------- Unity
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Game Objects
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Scenes
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Tile map
-----------------------------------------------------------------

Empty Game object "level"
=> put tiles inside

-----------------------------------------------------------------
------------------------- Input
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Camera
-----------------------------------------------------------------

Click on camera.

Use the position to set objects/camera, not your intuitive guess

remove background => set color => dark

-----------------------------------------------------------------
------------------------- Components
-----------------------------------------------------------------

OnTriggerEnter2D => run when our object collides with another
=> give both a collider set to trigger
=> one of them must have a rigid body

RigidBody => kinematic : no gravity
=> add gravity + physics

USE TAGS in collider easy to guess with who collided

GetComponent<Renderer>().enabled = true;

-----------------------------------------------------------------
------------------------- Materials
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- LIGHT and SHADOWS
-----------------------------------------------------------------

Light => shader => copy
=> https://github.com/TwoTailsGames/Unity-Built-in-Shaders
=> https://github.com/adrian-miasik/unity-shaders

Directional light => rotate => black :(
=> Lightning => Environment => source: color

cast shadow (mesh rendered) off for walls
=> wall is not casting shadows on the player

Torch
=> point light orange
=> shadow type: hard => projected on the wall

=> light with the sun transparent (mesh)

-----------------------------------------------------------------
------------------------- Useful methods
-----------------------------------------------------------------

------ general

Instantiate(obj, pos, rot)
Destroy(obj)
Destroy(obj, time_before_death)
SendMessageUpwards("StopMoving");

----- vector

new Vector3().normalized (do not move faster diagonally if used set position)
Vector2.MoveTowards(start, target, speed) => easy for follow something
_targetBounds.Intersects(_myRenderer.bounds) // Check collision
if (Vector3.Distance(_targetBounds.center,_myRenderer.bounds.center) <= 0.001f) // near

------ coroutine

StartCoroutine(WaitForSecondsAndShow());
private IEnumerator WaitForSecondsAndShow()
{
	yield return new WaitForSeconds(2f);
}

-----------------------------------------------------------------
------------------------- Random bunch of notes
-----------------------------------------------------------------

Click on the "..." and debug to enable debug mode
=> ex: shadow casting on
=> do it from the code

In 2D: freeze rotation (good for platformers)
=> camera INSIDE the player => follow

The image size must be a power of two, so you can compress it. You can compress sounds too (50% seems good).

You can and should group variables. You can use `[Header("name")]` / `[Space(value)]` before your variables declarations.

In RigidBodyComponent, in `Interpolate`, enable interpolation for the main character, as the [documentation is suggesting](https://docs.unity3d.com/ScriptReference/Rigidbody-interpolation.html).

Enable `post-processing` in rendering.

-----------------------------------------------------------------
------------------------- UserInterface (UI)
-----------------------------------------------------------------

<details class="details-e">
<summary>UI Builder (2020.3+, upcoming)</summary>

**In 2021, you might look at the UI Builder**, to create user interfaces (UI), like in [this video](https://www.youtube.com/watch?v=NQYHIH0BJbs&ab_channel=CocoCode).
</details>

</details>