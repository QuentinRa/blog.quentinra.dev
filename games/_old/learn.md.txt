-----------------------------------------------------------------
------------------------- Unity
-----------------------------------------------------------------
click on the axis (top right).
-----------------------------------------------------------------
------------------------- Game Objects
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Scenes
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Tile map
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- Input
-----------------------------------------------------------------
dead/sensitivity => make it like we were gradually pressing a joystick
-----------------------------------------------------------------
------------------------- Camera
-----------------------------------------------------------------

Click on camera.

Use the position to set objects/camera, not your intuitive guess

remove background => set color => dark

=> camera INSIDE the player => follow

-----------------------------------------------------------------
------------------------- Components
-----------------------------------------------------------------

OnTriggerEnter2D => run when our object collides with another
=> give both a collider set to trigger
=> one of them must have a rigid body

RigidBody => kinematic : no gravity
=> add gravity + physics
=> jump: AddForce() => up Vector.up and ForceMode
=> In 2D: freeze rotation (good for platformers)

=> FixedUpdate => once per physics update (100 times per seconds)
=> use attribute, updated in Update, to change the physics

Physics.OverlapsSphere => return the components colliding with a position (ex: our feet)
=> filter layers only

Physic Material
=> create component
=> set friction to 0, and minimum

Vector.up
Vector.forward/...

USE TAGS in collider easy to guess with who collided

GetComponent<Renderer>().enabled = true;

Project Settings => Physics => matrix of which layer is colliding with which one

-----------------------------------------------------------------
------------------------- Materials
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- LIGHT and SHADOWS
-----------------------------------------------------------------

Light => shader => copy
=> https://github.com/TwoTailsGames/Unity-Built-in-Shaders
=> https://github.com/adrian-miasik/unity-shaders

Directional light => rotate => black :(
=> Lightning => Environment => source: color

cast shadow (mesh rendered) off for walls
=> wall is not casting shadows on the player

Torch
=> point light orange
=> shadow type: hard => projected on the wall

=> light with the sun transparent (mesh)

-----------------------------------------------------------------
------------------------- Useful methods
-----------------------------------------------------------------

------ general

Instantiate(obj, pos, rot)
Destroy(obj)
Destroy(obj, time_before_death)
SendMessageUpwards("StopMoving");

----- vector

new Vector3().normalized (do not move faster diagonally if used set position)
Vector2.MoveTowards(start, target, speed) => easy for follow something
_targetBounds.Intersects(_myRenderer.bounds) // Check collision
if (Vector3.Distance(_targetBounds.center,_myRenderer.bounds.center) <= 0.001f) // near

------ coroutine

StartCoroutine(WaitForSecondsAndShow());
private IEnumerator WaitForSecondsAndShow()
{
	yield return new WaitForSeconds(2f);
}

------------------ cs

YYY.XXX => using YYY (note)

Drag and drop a script on a player.

-----------------------------------------------------------------
------------------------- Random bunch of notes
-----------------------------------------------------------------

Click on the "..." and debug to enable debug mode
=> ex: shadow casting on
=> do it from the code

The image size must be a power of two, so you can compress it. You can compress sounds too (50% seems good).

You can and should group variables. You can use `[Header("name")]` / `[Space(value)]` before your variables declarations.

In RigidBodyComponent, in `Interpolate`, enable interpolation for the main character, as the [documentation is suggesting](https://docs.unity3d.com/ScriptReference/Rigidbody-interpolation.html).

Enable `post-processing` in rendering.

-----------------------------------------------------------------
------------------------- UserInterface (UI)
-----------------------------------------------------------------
-----------------------------------------------------------------
------------------------- FAQ
-----------------------------------------------------------------

Platformer

isGrounded => check collider with the floor
=> or, check if not colliding with someone