============
Interpreter
============

Il semblerait que le patron Interpreter ne soit qu'un Parser
de code d'un langage vers le notre.

Je crois que c'est principalement pour insister sur le fait
qu'un langage c'est un grammaire donc par exemple faire des classes/m√©thodes pour chaque
√©l√©ments de la grammaire (m√©thode et, ou, imp, equi, ... en logique par exemple) et en fait d√®s qu'on va
parser notre fichier/expression, on va essayer de d√©couper notre truc pour obtenir
les arguments d'une de nos op√©rations (par exemple a et b pour un +), sauf que a
et b ne sont pas forc√©ment des valeurs, donc faut aussi les parser.

Chacun des classes (g√©n√©ralement, EtExpression, OuExpression, ...) contiennent
une m√©thode interpret qui prends une expression (string par exemple) et retourne son √©valuation
par le langage.

More

	* :code:`‚û°Ô∏è` : Par exemple un parseur qui lit un XML et retourne un objet JAVA correspondant.
	* :code:`‚úÖ` : si le langage est simple
	* :code:`üö´` : si le langage est compliqu√© (trop difficile de g√©rer tous les cas)

Les fonctions JAVA comme :code:`String.valueof(...)` sont des parseurs
de int/... vers String.