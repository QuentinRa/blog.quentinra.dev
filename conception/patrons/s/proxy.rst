========
Proxy
========

Un proxy est une classe dont les m√©thodes appellent les m√©thodes
d'un autre objet. On l'a rapidement vu avec d√©corateur ou a beaucoup
d'endroits mais en gros un proxy P contient une instance disons d'une classe
B qui h√©rite d'une interface/... I. Le proxy va h√©riter de I, ajouter
des nouvelles m√©thodes mais vu qu'il a la flemme de remplir les m√©thodes de I,
il va utiliser une classe concr√®te donc B et utiliser l'impl√©mentation de B.

En un mot : c'est un ARNAQUEUR, mais c'est tr√®s malin.

Sinon, on peut aussi utiliser un proxy pour mettre en relation un objet
et un objet distant mais bon vous voyez l'id√©e.

More

	*
		:code:`‚û°Ô∏è` : par exemple, si vous avez un groupe de figures et voulez utiliser les
		m√©thodes de Collection, vous allez impl√©menter Collection (pour proposer les m√™me fonctions)
		mais avoir une ArrayList de figures comme attribut parce que c'est le plus facile pour faire un groupe.
	* :code:`‚úÖ` : temps gagn√©, √©vite de devoir refaire des trucs d√©j√† faits, simplifie le code
	* :code:`üö´` : un peu relou si vous avez beaucoup de m√©thodes dans I √† "proxy-ser"

.. code:: java

		import java.util.ArrayList;

		public class Sac {
		 private final ArrayList<Object> objects;

		 public Sac(ArrayList<Object> objects){ this.objects = objects; }

		 // proxy
		 public boolean ajouter(Object o){ return this.objects.add(o); }
		 public boolean remove(Object o){ return this.objects.remove(o); }
		 public boolean contient(Object o){ return this.objects.contains(o); }
		 // ...

		}