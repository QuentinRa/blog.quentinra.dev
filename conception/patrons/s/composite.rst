=============
Composite
=============

La patron composite exploite la substitution de Liskov.

Si une classe enfant E extends (h√©rite) d'une classe Parent P, alors
la classe E poss√®de les m√©thodes de P (et ses m√©thodes). On peut donc
appeler une m√©thode :code:`add(P argument)` par exemple en donnant un objet de type E
(m√™me si la m√©thode demande un truc de type P car E n'est qu'une P avec de nouvelles m√©thodes).

On va donc cr√©er une classe abstraite/interface g√©n√©ralement qui sera
le composant. Ensuite on aura une classe Fichier et une classe Dossier qui h√©ritent de Composant.

L'id√©e g√©n√©rale est qu'un dossier, contient des feuilles ou d'autres dossiers.
Alors qu'une fichier ne contient rien. Si on veut compter le nombre de fichier, on
va mettre dans composant une m√©thode count()

	* dans un dossier, on va demander √† tous les composants (feuilles/dossiers) leur count()
	* dans un fichier, on va retourner 1

Donc vous le voyez s√ªrement, mais on va pouvoir facilement compter le nombre de fichiers
en exploitant la g√©n√©ricit√©.

Dans l'exemple plus haut, le composite est la classe Dossier.

More

	* :code:`‚û°Ô∏è` : par exemple pour dossiers/fichiers, arbre/feuilles, classes graphiques ...
	* :code:`‚úÖ` : facile d'ajouter des composants/comportements g√©n√©riques et c'est flexible
	* :code:`üö´` : aucun ?

.. code:: java

		public interface Component {
		 // nombre de fichiers
		 int getFileCount();
		}

		public class File implements Component {
		 @Override
		 public int getFileCount() { return 1; }
		}

		public class Folder implements Component {
		 // all files
		 private final ArrayList<Component> content;

		 // creates
		 public Folder(Component ... content) {
			this.content = new ArrayList<>();
			this.content.addAll(Arrays.asList(content));
		 }

		 @Override
		 public int getFileCount() {
			int count = 0; // ask for each component, getFileCount
			for (Component c:this.content) {
			 count += c.getFileCount();
			}
			return count + 1; //folder count as one, why not x)
		 }
		}

		public class Test {
		 public static void main(String[] args) {
			int c = new Folder(
				new File(),
				new Folder(
					new File(),
					new Folder(),
					new Folder(),
					new Folder(),
					new File()
				),
				new File()
			).getFileCount();
			System.out.println("Count:"+c);
		 }
		}