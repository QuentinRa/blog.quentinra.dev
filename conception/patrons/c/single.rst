===========
Singleton
===========

Le singleton est utilis√© si une classe ne soit avoir qu'une seule instance.
Vous allez alors cr√©er l'instance si elle n'existe pas ou alors retourn√©e l'instance
d√©j√† cr√©e.

Vous pouvez √©galement directement initialiser la variable static.

Soyez sur de rendre priv√©s vos constructeurs, sinon personne ne va utiliser
votre m√©thode :code:`getInstance() : instance` (nom traditionnel) qui est
cens√©e retourner l'instance de la classe (souvent gard√©e dans un attribut i ou instance).

More

	* :code:`‚û°Ô∏è` : les classes Config, ... connues sous la nom de classes Utility qui ne sont l√† que pour aider
	* :code:`‚úÖ` : cela permet de r√©duire la consommation de m√©moire
	* :code:`üö´` : peut poser des probl√®mes car c'est une "instance globale" (par acc√®s acc√®s simultan√©s si vous utiliser des threads, ...)

.. code:: java

		public class RpgMaker {
		 private static RpgMaker instance = null;

		 // get instance, lazy instantiation
		 public static RpgMaker getInstance() {
			// creates
			if(instance == null) instance = new RpgMaker();
			return instance;
		 }

		 // private !!!
		 private RpgMaker(){}
		}

		// ou

		public class RpgMaker {
		 // creates, early instantiation
		 private static RpgMaker instance = new RpgMaker();

		 // get instance
		 public static RpgMaker getInstance() {
			return instance;
		 }

		 // private !!!
		 private RpgMaker(){}
		}