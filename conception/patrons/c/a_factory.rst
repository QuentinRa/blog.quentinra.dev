================
AbstractFactory
================

Aussi appel√© Kit.

Une AbstractFactory est une usine utilisant plusieurs Factory.

Imaginons vous avez une factory pour cr√©er des monstres, une pour cr√©er
des h√©ros et une pour cr√©er des personnages non joueurs (PNJ, NPC en anglais),
alors une AbstractFactory aurait 3 m√©thodes, chacune utilisant une factory.

En fait c'est un peu plus complexe

	* une AbstractFactory est groupe de Factory
	* les Factory ont la m√™me s√©mantique (donc √ßa a un sens de les mettre ensemble)
	* on fait une m√©thode par Factory
	* chaque m√©thode de l'AbstractFactory retourne **une factory** !

More

	* :code:`‚û°Ô∏è` : par exemple un gestionnaire de drivers SQL ?
	* :code:`‚úÖ` : fait une super isolation, facile de changer les classes concr√®tes
	* :code:`üö´` : trop de code, parfois tr√®s complexe

C'est beaucoup trop de code donc pas d'exemple, mais je r√©sume

	* imaginons deux interfaces : Monstre et Humain
	* qui auront des sous-classes : Gobelin, Troll ... et H√©ros, PNJ
	* On va cr√©er une AbstractFactory (abstraite)

		* la m√©thode monster(...) va cr√©er des monstres (et retourne un Montre)
		* la m√©thode human(...) va cr√©er des humains (et retourne un Humain)

	* on va maintenant cr√©er MonstreFactory et HumainFactory qui extends AbstractFactory et qui cr√©ent des monstres/humains
	* Enfin, on code notre UnitCreator (concr√®te)

		* on va retourner une AbstractFactory !
		* mais dans le code de la m√©thode, ce sera une MonstreFactory/HumainFactory
		* on peut appeler la m√©thode getFactory par exemple

	* dans votre code, on va manipuler

		* UnitCreator : pour cr√©er une AbstractFactory
		* AbstractFactory : pour cr√©er des monstres/humains
		* Monstre et Humain : car ce sont les trucs cr√©√©es

	* et donc on ne manipulera pas Gobelin, Troll, ... H√©ros, PNJ car ils sont cach√©s !!!
	* et donc on ne manipulera pas MonstreFactory et HumainFactory car ils sont cach√©s !!!